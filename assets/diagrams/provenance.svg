from graphviz import Digraph
import os

# Ensure directory exists
out_dir = "/mnt/data/assets/diagrams"
os.makedirs(out_dir, exist_ok=True)

# Create provenance graph
g = Digraph("provenance", format="svg")
g.attr(rankdir="LR", fontsize="12", fontname="Helvetica")

# Legend cluster
with g.subgraph(name="cluster_legend") as c:
    c.attr(label="Legend", style="rounded", color="lightgrey", fontsize="11")
    c.node("L_IMPL", "Solid edge = Implemented in code", shape="plaintext")
    c.node("L_REF", "Dashed edge = Referenced / influenced", shape="plaintext")
    c.node("L_INTRO", "Bold edge = Introduced in release", shape="plaintext")

# ADRs cluster
with g.subgraph(name="cluster_adrs") as c:
    c.attr(label="Architecture Decision Records (ADRs)", style="rounded", color="lightgrey")
    c.node("ADR0000", "ADR 0000\nTemplate")
    c.node("ADR0001", "ADR 0001\nChoose Hydra + DVC")
    c.node("ADR0002", "ADR 0002\nPhysics-Informed Losses")
    c.node("ADR0004", "ADR 0004\nDual Encoder Fusion (FGS1 + AIRS)")

# Changelog releases cluster
with g.subgraph(name="cluster_changelog") as c:
    c.attr(label="Changelog Releases", style="rounded", color="lightgrey")
    c.node("C0001", "Changelog [0.0.1]\n(2025-09-01)")
    c.node("C0002", "Changelog [0.0.2]\n(2025-09-02)")
    c.node("C0003", "Changelog [0.0.3]\n(2025-09-03)")
    c.node("C0100", "Changelog [0.1.0]\n(2025-09-05)")
    c.node("C0110", "Changelog [0.1.1]\n(2025-09-07)")

# Code components cluster
with g.subgraph(name="cluster_code") as c:
    c.attr(label="Code Components", style="rounded", color="lightgrey")
    c.node("CODE001", "configs/train.yaml")
    c.node("CODE002", "src/spectramind/losses/composite.py")
    c.node("CODE003", "src/spectramind/models/fusion_xattn.py")
    c.node("CODE004", "dvc.yaml")

# Relationships between ADRs, Changelog, and Code
# ADR 0001 introduced Hydra + DVC
g.edge("ADR0001", "C0001", style="bold")
g.edge("ADR0001", "CODE004", style="solid")

# ADR 0002 → composite physics-informed loss implementation
g.edge("ADR0002", "C0100", style="bold")
g.edge("ADR0002", "CODE002", style="solid")

# ADR 0004 → dual encoder fusion
g.edge("ADR0004", "C0110", style="bold")
g.edge("ADR0004", "CODE003", style="solid")

# Changelog progression
g.edge("C0001", "C0002", style="dashed")
g.edge("C0002", "C0003", style="dashed")
g.edge("C0003", "C0100", style="dashed")
g.edge("C0100", "C0110", style="dashed")

# Config/train.yaml influenced by multiple ADRs
g.edge("ADR0001", "CODE001", style="solid")
g.edge("ADR0002", "CODE001", style="solid")
g.edge("ADR0004", "CODE001", style="solid")

# Render to file
output_path = os.path.join(out_dir, "provenance")
g.render(output_path, format="svg", cleanup=True)

output_file = f"{output_path}.svg"
output_file

## 🔧 Drop-in `.secrets.baseline` (hardened)

```json
{
  "version": "1.8.0",
  "generated_at": "2025-09-13T00:00:00Z",
  "exclude": "(^|/)(\\.git|\\.hg|\\.svn|\\.tox|\\.venv|venv|env|node_modules|dist|build|site|htmlcov|coverage|reports|logs|artifacts|__pycache__|\\.mypy_cache|\\.pytest_cache|\\.ruff_cache|\\.dvc/cache|data/raw|data/interim|data/external|notebooks/.+\\.ipynb_checkpoints|\\.idea|\\.vscode|.*\\.egg-info|assets/|docs/_build/)(/|$)|\\.(svg|ico|woff2?|ttf)$",
  "plugins_used": [
    { "name": "AWSKeyDetector" },
    { "name": "ArtifactoryDetector" },
    { "name": "AzureStorageKeyDetector" },
    { "name": "BasicAuthDetector" },
    { "name": "CloudantDetector" },
    { "name": "GitHubTokenDetector" },
    { "name": "GitLabTokenDetector" },
    { "name": "IbmCloudIamDetector" },
    { "name": "JwtTokenDetector" },
    { "name": "MailchimpDetector" },
    { "name": "PrivateKeyDetector" },
    { "name": "SlackDetector" },
    { "name": "StripeDetector" },
    { "name": "TwilioKeyDetector" },

    { "name": "Base64HighEntropyString", "limit": 4.8 },
    { "name": "HexHighEntropyString",   "limit": 3.2 },

    {
      "name": "KeywordDetector",
      "keyword_exclude": "(?i)(example|sample|dummy|test|notsecret|passwordless|lorem|ipsum|placeholder|template|public|docs|ci_secret_example|token_for_docs|DEADBEEF|000000|111111)"
    }
  ],
  "filters_used": [
    { "path": "detect_secrets.filters.allowlist.is_line_allowlisted" },
    { "path": "detect_secrets.filters.common.is_baseline_file" },
    { "path": "detect_secrets.filters.heuristic.is_indirect_reference" },
    { "path": "detect_secrets.filters.heuristic.is_likely_id_string" },
    { "path": "detect_secrets.filters.heuristic.is_sequential_string" },
    { "path": "detect_secrets.filters.heuristic.is_swagger_file" },
    { "path": "detect_secrets.filters.heuristic.is_templated_secret" }
  ],
  "results": {}
}
```

### What changed & why

* **Broader safe excludes**: ignores vector/web assets (`svg, ico, woff/woff2, ttf`) and `.__cache` dirs to cut noise.
* **Entropy detectors kept** with sane limits (`4.8` / `3.2`) to catch real leaks without flagging UUIDs & hashes every other line.
* **Keyword detector** deny-list extended (common dummy tokens).
* **Empty `results`**: baseline is clean; any new finding fails hooks/CI unless explicitly allow-listed inline.

---

## ✅ Wire it up (pre-commit)

Add/merge this to `.pre-commit-config.yaml`:

```yaml
- repo: https://github.com/Yelp/detect-secrets
  rev: v1.5.0
  hooks:
    - id: detect-secrets
      name: detect-secrets (staged)
      args:
        - --baseline
        - .secrets.baseline
        - --fail-on-skipped
        - --exclude-files
        - "(?i)(^|/)(tests?/.*|docs/.*|.*\\.md$)"
      stages: [commit]
```

> First run (creates/updates baseline if needed):

```bash
detect-secrets scan --baseline .secrets.baseline
pre-commit run -a
```

---

## 🧪 CI gate (non-blocking → blocking)

Start non-blocking to observe:

```bash
detect-secrets scan --baseline .secrets.baseline || true
```

Flip to **blocking** once green:

```bash
detect-secrets scan --baseline .secrets.baseline
```

---

## 📝 Tips for clean signal

* Prefer **env vars / CI secrets / Kaggle secrets**; never hard-code tokens.
* For intentional test strings, add a local allow-list comment on that line:

  ```
  # pragma: allowlist secret
  ```
* Re-baseline **only** after auditing diffs:

  ```bash
  detect-secrets audit .secrets.baseline
  detect-secrets scan --baseline .secrets.baseline
  ```

# ==============================================================================
# .cz.toml — Commitizen configuration for SpectraMind V50
# ------------------------------------------------------------------------------
# Enforces Conventional Commits across the repo with clean tags & changelogs.
# Compatible with cz-conventional-commits; conservative options only.
# ==============================================================================

[tool.commitizen]
name = "cz_conventional_commits"

# --- Versioning & tagging -----------------------------------------------------
version = "0.1.0"
version_scheme = "pep440"              # normalized Python semantics
major_version_zero = true              # keep semver rules for 0.x (feat -> MINOR)
tag_format = "v$version"               # e.g., v0.1.0
annotated_tag = true                   # create annotated git tags
tag_message = "release: v$version"     # tag annotation text
bump_message = "chore(release): v$current_version → v$new_version"

# --- Files to bump in lockstep -----------------------------------------------
version_files = [
  "VERSION",
  "pyproject.toml:version",
  "src/spectramind/__init__.py:__version__",
]

# --- Changelog ----------------------------------------------------------------
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"
changelog_incremental = true           # append-only during bumps
# If you want to start from a specific tag/revision, uncomment:
# changelog_start_rev = "v0.1.0"

# --- Presentation order in CHANGELOG (nice-to-read grouping) -----------------
change_type_order = [
  "feat",
  "fix",
  "perf",
  "refactor",
  "build",
  "ci",
  "test",
  "docs",
  "style",
  "chore",
  "revert",
]

# --- (Optional) filters; keep defaults if unsure ------------------------------
# commit_parser = "^(?P<change_type>feat|fix|perf|refactor|build|ci|test|docs|style|chore|revert)(?:\\((?P<scope>[^)]+)\\))?(?P<breaking>!)?: (?P<message>.+)$"
# changelog_pattern = "^(feat|fix|perf|refactor|build|ci|test|docs|style|chore|revert)(\\(.+\\))?(!)?:"

# ==============================================================================
# Notes:
# - We stick with `cz_conventional_commits` to avoid breaking prompts & defaults.
# - `major_version_zero=true` keeps semver semantics sensible while <1.0.0.
# - `annotated_tag=true` gives nicer release notes & signed metadata on tags.
# - The optional parser/pattern above mirrors Conventional Commits with "!".
# - If you later want fully custom prompts/templates, switch to `cz_customize`.
# ==============================================================================


# ------------------------------------------------------------------------------
# (Optional) Lightweight message guidance for contributors
# ------------------------------------------------------------------------------
[tool.commitizen.customize]
# NOTE: This section is *advisory* when using cz_conventional_commits; it won’t
# override the default parser but serves as reference for commit crafting.
message_template = "{{type}}({{scope}}): {{message}}"

# Conventional commit types (reference ordering mirrors change_type_order)
types = [
  { type = "feat",     description = "A new feature" },
  { type = "fix",      description = "A bug fix" },
  { type = "perf",     description = "Performance improvements" },
  { type = "refactor", description = "Refactoring without behavior change" },
  { type = "build",    description = "Build system or external deps" },
  { type = "ci",       description = "CI/CD changes" },
  { type = "test",     description = "Adding/updating tests" },
  { type = "docs",     description = "Documentation changes" },
  { type = "style",    description = "Code style/formatting (no logic change)" },
  { type = "chore",    description = "Maintenance tasks" },
  { type = "revert",   description = "Revert a previous commit" },
]

# Scopes (guide only; not enforced by cz_conventional_commits)
scopes = [
  "cli",
  "pipeline",
  "data",
  "models",
  "calib",
  "inference",
  "diagnostics",
  "docs",
  "tests",
  "infra",
]

# ==============================================================================
# .cz.toml — Commitizen configuration for SpectraMind V50 (hardened)
# ------------------------------------------------------------------------------
# Conventional Commits + automated version/tag/changelog bumps.
# Canonical version source: pyproject.toml (PEP 621).
# ==============================================================================

[tool.commitizen]
name = "cz_conventional_commits"

# ---- Canonical version source (avoid drift) ----------------------------------
version_provider = "pep621"            # read from [project].version in pyproject.toml
version_scheme   = "pep440"
major_version_zero = true              # semver semantics under 1.0.0 (feat -> MINOR)

# ---- Tags --------------------------------------------------------------------
tag_format     = "v$version"           # e.g. v0.1.0
annotated_tag  = true
tag_message    = "release: v$version"

# ---- Bump commit message -----------------------------------------------------
bump_message = "chore(release): v$current_version → v$new_version"

# ---- Files to bump in lockstep -----------------------------------------------
# First file is the source of truth (pyproject via pep621). Others mirror it.
version_files = [
  "VERSION",
  "pyproject.toml:^version\\s*=\\s*\"(?P<version>.*)\"",
  "src/spectramind/__init__.py:^__version__\\s*=\\s*\"(?P<version>.*)\"",
]

# ---- Changelog generation -----------------------------------------------------
update_changelog_on_bump = true
changelog_file           = "CHANGELOG.md"
changelog_incremental    = true
# Optionally set a start revision for first release notes:
# changelog_start_rev = "v0.1.0"

# ---- Presentation order in CHANGELOG -----------------------------------------
change_type_order = [
  "feat", "fix", "perf", "refactor", "build", "ci", "test", "docs", "style", "chore", "revert"
]

# ---- (Optional) prereleases/devreleases --------------------------------------
# prerelease     = true
# prerelease_tag = "rc"                 # or "a" / "b"
# devrelease     = false                # .devN suffixes

# ---- Advisory: message template & allowed types/scopes (informational) -------
[tool.commitizen.customize]
message_template = "{{type}}{{#scope}}({{.}}){{/scope}}: {{message}}"

types = [
  { type = "feat",     description = "A new feature" },
  { type = "fix",      description = "A bug fix" },
  { type = "perf",     description = "Performance improvements" },
  { type = "refactor", description = "Refactoring without behavior change" },
  { type = "build",    description = "Build system or external deps" },
  { type = "ci",       description = "CI/CD changes" },
  { type = "test",     description = "Adding/updating tests" },
  { type = "docs",     description = "Documentation changes" },
  { type = "style",    description = "Code style/formatting (no logic change)" },
  { type = "chore",    description = "Maintenance tasks" },
  { type = "revert",   description = "Revert a previous commit" }
]

scopes = [
  "cli", "pipeline", "data", "models", "calib",
  "inference", "diagnostics", "docs", "tests", "infra"
]
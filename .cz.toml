# ==============================================================================
# .cz.toml — Commitizen configuration for SpectraMind V50
# ------------------------------------------------------------------------------
# Enforces Conventional Commits and automates version/tag/changelog bumps.
# Compatible with cz-conventional-commits (conservative, non-interactive safe).
# ==============================================================================

[tool.commitizen]
name = "cz_conventional_commits"

# --- Where to read/write the version -----------------------------------------
# Prefer explicit version field; if you switch to PEP 621-only later, set:
#   version_provider = "pep621"
version = "0.1.0"
version_scheme = "pep440"              # normalized Python semantics
major_version_zero = true              # semver semantics under 1.0.0 (feat -> MINOR)

# --- Tagging ------------------------------------------------------------------
tag_format = "v$version"               # e.g. v0.1.0
annotated_tag = true                   # create annotated tags
tag_message = "release: v$version"     # git tag -a message

# --- Bump commit message ------------------------------------------------------
bump_message = "chore(release): v$current_version → v$new_version"

# --- Files to bump in lockstep ------------------------------------------------
# Order matters; first hit often becomes the source-of-truth in mixed setups.
version_files = [
  "VERSION",
  "pyproject.toml:^version\\s*=\\s*\"(?P<version>.*)\"",
  "src/spectramind/__init__.py:^__version__\\s*=\\s*\"(?P<version>.*)\"",
]

# --- Changelog generation -----------------------------------------------------
update_changelog_on_bump = true
changelog_file = "CHANGELOG.md"
changelog_incremental = true           # append-only entries during bumps
# If first release should start from a specific tag/revision, uncomment:
# changelog_start_rev = "v0.1.0"

# --- Presentation order in CHANGELOG -----------------------------------------
change_type_order = [
  "feat",
  "fix",
  "perf",
  "refactor",
  "build",
  "ci",
  "test",
  "docs",
  "style",
  "chore",
  "revert",
]

# --- Optional: prerelease & devrelease knobs (safe defaults are commented) ----
# Allow prerelease bumps like 0.2.0a1, 0.2.0b1, 0.2.0rc1:
# prerelease = true
# prerelease_tag = "rc"                 # or "a", "b"
# devrelease = false                    # enable for .devN suffixes

# --- Optional: read version only from pyproject (PEP 621) ---------------------
# version_provider = "pep621"

# --- Optional: commit message parsing customization ---------------------------
# Keep default regex unless you truly need custom scopes/types.
# commit_parser = "^(?P<change_type>feat|fix|perf|refactor|build|ci|test|docs|style|chore|revert)(?:\\((?P<scope>[^)]+)\\))?(?P<breaking>!)?: (?P<message>.+)$"
# changelog_pattern = "^(feat|fix|perf|refactor|build|ci|test|docs|style|chore|revert)(\\(.+\\))?(!)?:"

# ------------------------------------------------------------------------------ 
# (Advisory) lightweight guidance for contributors. This is informational only
# when using `cz_conventional_commits` (it won’t override the default parser).
# ------------------------------------------------------------------------------
[tool.commitizen.customize]
message_template = "{{type}}({{scope}}): {{message}}"

types = [
  { type = "feat",     description = "A new feature" },
  { type = "fix",      description = "A bug fix" },
  { type = "perf",     description = "Performance improvements" },
  { type = "refactor", description = "Refactoring without behavior change" },
  { type = "build",    description = "Build system or external deps" },
  { type = "ci",       description = "CI/CD changes" },
  { type = "test",     description = "Adding/updating tests" },
  { type = "docs",     description = "Documentation changes" },
  { type = "style",    description = "Code style/formatting (no logic change)" },
  { type = "chore",    description = "Maintenance tasks" },
  { type = "revert",   description = "Revert a previous commit" },
]

scopes = [
  "cli",
  "pipeline",
  "data",
  "models",
  "calib",
  "inference",
  "diagnostics",
  "docs",
  "tests",
  "infra",
]
# configs/training/logger.yaml
# ======================================================================
# SpectraMind V50 — Logger selector (Hydra-friendly indirection)
# ======================================================================
# Usage:
#   # default (JSONL to ${paths.logs})
#   spectramind train
#
#   # pick TensorBoard (native PL)
#   spectramind train +/logger@training.logger.choice=tensorboard
#
#   # pick Weights & Biases (offline-ok if WANDB_MODE=dryrun)
#   spectramind train +/logger@training.logger.choice=wandb
#
#   # disable external loggers, keep only file callbacks
#   spectramind train training.logger.enabled=false
# ======================================================================

# ----------------------------------------------------------------------
# Select ONE backend from the /logger config group
# (expects files like configs/logger/jsonl.yaml, tensorboard.yaml, wandb.yaml…)
# ----------------------------------------------------------------------
defaults:
  - /logger@choice: jsonl

# ----------------------------------------------------------------------
# Normalized interface the trainer/logger-factory can rely on (backend-agnostic)
# ----------------------------------------------------------------------
enabled: true

# Canonical logs root (factory should mkdir -p if safety.create_dirs)
dir: ${paths.logs}

# Naming & run identity (used to form run_name/run_dir; safe for CI/Kaggle)
experiment_name: ${experiment.name}
tags: ${experiment.tags}
uuid_suffix: ${oc.env:SM_RUN_SUFFIX, ""}       # optional suffix for uniqueness
run_id_env: ${oc.env:SM_RUN_ID, ""}            # if provided, override auto run_id
timestamp_fmt: "%Y%m%d-%H%M%S"

# Cadence knobs applied where supported
flush_every_n_steps: 50
log_every_n_steps: 25
log_graph: false

# CI/Kaggle safety; lets code gate network use. True by default.
offline: ${oc.env:SM_LOG_OFFLINE, true}

# Optional structured “run_dir” derivation (trainer may use it for artifacts)
# e.g., ${dir}/${experiment_name}/${now:%Y%m%d-%H%M%S}${uuid_suffix}
derived:
  run_dir_pattern: "${dir}/${experiment_name}/${now:%Y%m%d-%H%M%S}${uuid_suffix}"

# ----------------------------------------------------------------------
# Lightning logger construction hints
# ----------------------------------------------------------------------
pl:
  use_native: true                           # build a real PL logger when possible
  fallback_to_callbacks: true                # if backend missing, keep JSONL/CSV callbacks
  # If you rely only on callbacks (CSV/JSONL), set use_native: false.

# ----------------------------------------------------------------------
# Backend passthrough (resolved from /logger@choice)
# Expose raw backend-specific keys under a stable path for factories.
# ----------------------------------------------------------------------
backend:
  name: ${choice.name}                       # "jsonl" | "tensorboard" | "wandb" | "mlflow" | "none"
  passthrough: ${choice}                     # entire chosen logger config

# ----------------------------------------------------------------------
# Safety gates (enforced by trainer/factory)
# ----------------------------------------------------------------------
safety:
  forbid_network_when_offline: true          # hard block WAN calls if offline==true
  create_dirs: true
  rotate_large_files: true
  rotate_threshold_mb: 256
  redact_env_vars:
    enabled: true
    keys_regex:
      - "(?i).*(_|^)KEY($|_).*"
      - "(?i).*(_|^)SECRET($|_).*"
      - "(?i).*(_|^)TOKEN($|_).*"
      - "(?i).*(_|^)PASSWORD($|_).*"
  # If a backend init fails (e.g., WANDB not installed), do not crash training
  degrade_to_noop_on_failure: true

# ----------------------------------------------------------------------
# Backend defaults/overrides (applied by factory if fields exist)
# Keeps behavior consistent across backends without touching their files.
# ----------------------------------------------------------------------
defaults_for_backends:
  jsonl:
    save_dir: ${dir}/jsonl
    filename: "metrics.jsonl"
  tensorboard:
    save_dir: ${dir}/tb
  wandb:
    project: ${experiment.project, "spectramind-v50"}
    entity: ${oc.env:WANDB_ENTITY, ""}
    run_name: "${experiment_name}-${now:%Y%m%d-%H%M%S}${uuid_suffix}"
    mode: ${oc.env:WANDB_MODE, "dryrun"}     # “dryrun” when offline
    sync_tensorboard: false
  mlflow:
    tracking_uri: ${oc.env:MLFLOW_TRACKING_URI, ""}
    experiment_name: ${experiment_name}
    run_name: "${experiment_name}-${now:%Y%m%d-%H%M%S}${uuid_suffix}"

# ----------------------------------------------------------------------
# Notes
# ----------------------------------------------------------------------
# Factory wiring tips:
#   - If offline==true and safety.forbid_network_when_offline==true:
#       • Force WANDB_MODE=dryrun and skip network init for MLflow.
#       • Prefer local file-based loggers (JSONL/TB) and callbacks.
#   - Compute run_id = run_id_env or f"{now}{uuid_suffix}" and propagate to backends.
#   - Ensure ${derived.run_dir_pattern} is created early for artifact writers.
#   - Respect pl.use_native; if a backend import fails, log a warning and:
#       • if pl.fallback_to_callbacks: continue with JSONL/CSV callbacks
#       • else: proceed with a NoOp logger.
#   - TensorBoard/W&B double-write: keep sync_tensorboard=false unless desired.
#
# Override examples:
#   +/logger@training.logger.choice=tensorboard
#   training.logger.offline=false
#   training.logger.defaults_for_backends.wandb.entity="your-team"
#   training.logger.uuid_suffix="-kaggleA"

# ======================================================================
# SpectraMind V50 — DataLoader Config (Upgraded)
# ======================================================================
# Governs DataLoader behavior across training/validation/test:
# - batch sizing
# - shuffling / drop_last
# - worker threading & memory pinning
# - custom collate functions for dual-sensor fusion (FGS1 + AIRS)
#
# Designed for Kaggle/CI constraints: limited CPU cores, no internet,
# heavy GPU I/O. All keys are Hydra/oc.env overridable (SM_*).
# ======================================================================

dataloader:
  # ------------------------------ General ------------------------------
  batch_size: ${oc.env:SM_BATCH_SIZE, 32}
  shuffle: ${oc.env:SM_SHUFFLE, true}
  drop_last: ${oc.env:SM_DROP_LAST, true}

  # ------------------------------ Workers ------------------------------
  num_workers: ${oc.env:SM_WORKERS, 2}          # Kaggle-safe default
  prefetch_factor: ${oc.env:SM_PREFETCH, 2}     # per-worker prefetch
  persistent_workers: ${oc.env:SM_PERSISTENT, false}
  pin_memory: ${oc.env:SM_PIN_MEMORY, true}

  # ------------------------------ Collate ------------------------------
  collate_fn: ${oc.env:SM_COLLATE, "spectramind.data.collate.dual_channel_collate"}
  # The collate function aligns:
  #   - FGS1 long time-series (possibly binned / detrended)
  #   - AIRS 283-bin spectral cubes (μ, σ targets)
  # Produces consistent tensors + masks across a batch.

  # -------------------------- Validation Loader ------------------------
  val:
    batch_size: ${oc.env:SM_VAL_BATCH_SIZE, 64}
    shuffle: false
    drop_last: false

  # ----------------------------- Test Loader ---------------------------
  test:
    batch_size: ${oc.env:SM_TEST_BATCH_SIZE, 64}
    shuffle: false
    drop_last: false

# ------------------------------ Hydra I/O ------------------------------
hydra:
  job_logging:
    root:
      level: WARN
  run:
    dir: outputs/training/dataloader/${now:%Y-%m-%d_%H-%M-%S}

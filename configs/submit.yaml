# ======================================================================
# SpectraMind V50 — Submission Packaging Config (Hydra 1.x)
# ======================================================================
# Validates predictions, builds a deterministic ZIP, and (optionally)
# submits to Kaggle. Safe for local, CI, and Kaggle runtimes.
# ======================================================================

defaults:
  - env: local
  - override hydra/job_logging: disabled
  - override hydra/hydra_logging: disabled

# ----------------------------------------------------------------------
# Canonical paths (ENV-driven: portable across local/CI/Kaggle)
# ----------------------------------------------------------------------
paths:
  data_root: ${env.data_root}
  artifacts_root: ${env.artifacts_root}
  runs: ${paths.artifacts_root}/runs
  logs: ${hydra:run.dir}/logs
  outputs: ${paths.artifacts_root}/submission
  schema_dir: ${hydra:runtime.cwd}/schemas
  predictions_dir: ${paths.artifacts_root}/predictions
  manifests_dir: ${paths.artifacts_root}/manifests

# ----------------------------------------------------------------------
# I/O
# ----------------------------------------------------------------------
inputs:
  # CSV with either wide (id, mu_0..mu_282, sigma_0..sigma_282) or long format
  predictions: ${oc.env:SM_PREDICTIONS, ${paths.predictions_dir}/submission.csv}
  schema:      ${oc.env:SM_SUBMISSION_SCHEMA, ${paths.schema_dir}/submission.schema.json}

outputs:
  out_zip:   ${oc.env:SM_SUBMISSION_ZIP, ${paths.outputs}/submission.zip}
  manifest:  ${oc.env:SM_MANIFEST, ${paths.manifests_dir}/manifest_submission.json}
  readme_md: ${oc.env:SM_README, ${paths.outputs}/SUBMISSION_README.md}
  extra_files:
    - path: LICENSE
      required: false
    - path: ${outputs.readme_md}
      required: false

# ----------------------------------------------------------------------
# Packaging
# ----------------------------------------------------------------------
package:
  zip_root: null
  compression: "ZIP_DEFLATED"       # ZIP_STORED | ZIP_DEFLATED
  compresslevel: 6                   # 0..9 when supported
  deterministic: true                # fixed timestamps/order for reproducibility
  include:
    - ${inputs.predictions}
    - ${outputs.manifest}
  exclude_glob:
    - "**/__pycache__/**"
    - "**/*.tmp"
    - "**/*.log"
  max_zip_bytes: 157286400           # 150 MiB cap
  zip_comment: "SpectraMind V50 — NeurIPS 2025 Ariel Data Challenge"

# ----------------------------------------------------------------------
# Kaggle parameters
# ----------------------------------------------------------------------
kaggle:
  enabled: ${oc.env:KAGGLE_ENABLED, false}  # default off; enable explicitly
  competition: ${oc.env:KAGGLE_COMP, neurips-2025-ariel-data-challenge}
  title: ${oc.env:KAGGLE_TITLE, "SpectraMind V50 submission"}
  message: ${oc.env:KAGGLE_MSG, "Automated submission from SpectraMind V50 pipeline"}
  dry_run: ${oc.env:KAGGLE_DRY_RUN, true}   # safer default
  no_upload: ${oc.env:KAGGLE_NO_UPLOAD, false}
  retries: 3
  backoff_seconds: 10
  timeout_seconds: 600
  visibility: "private"              # private | public (if allowed)
  verify_ssl: true

# ----------------------------------------------------------------------
# Validation
# ----------------------------------------------------------------------
validate:
  strict: true
  quiet: false

  # JSON Schema for structural checks (283 μ/σ elements, etc.)
  schema:
    path: ${inputs.schema}
    enabled: true

  # Tabular sanity checks (fast fail)
  csv:
    header_required: true
    allowed_layouts: ["wide", "long"]
    id:
      required: true
      unique: true
      nonempty: true
      prefix: null             # e.g. "sample_"; null disables
      dtype: "string"
      max_bytes: 128
    mu:
      bins: 283
      finite: true
      dtype: "float"
      min: 0.0                 # transit depths are non-negative (domain-aware)
      max: 1.0                 # sanity bound; adjust if the challenge spec differs
    sigma:
      bins: 283
      finite: true
      nonnegative: true
      allow_zero: true
      dtype: "float"
      max: 1.0
    expected_rows: null        # set to an int to gate row count
    allow_nan: false
    allow_inf: false

  files:
    require_inputs: true
    max_csv_bytes: 104857600   # 100 MiB cap

# ----------------------------------------------------------------------
# Provenance metadata (auto-filled at runtime by submit.py)
# ----------------------------------------------------------------------
meta:
  project: "spectramind-v50"
  version: ${oc.env:SM_VERSION, "0.1.0"}
  run_id: null                        # uuid4
  created_at: null                    # ISO8601 UTC
  env: ${oc.env:SM_ENV, ${env.name}} # local|ci|kaggle
  user: ${oc.env:USER, "unknown"}
  git:
    hash: null
    branch: null
    dirty: null
    tag: null
  artifacts:
    predictions_sha256: null
    manifest_sha256: null
    zip_sha256: null
  config_snapshot:
    train: null
    data: null
    model: null

# ----------------------------------------------------------------------
# Diagnostics (optional quick plots & summaries)
# ----------------------------------------------------------------------
diagnostics:
  enabled: true
  out_dir: ${hydra:run.dir}/diagnostics
  plots:
    per_bin_mu_hist: true
    per_bin_sigma_hist: true
    mu_vs_sigma_scatter: true
  save_csv_summary: true

# ----------------------------------------------------------------------
# Hydra runtime (under env.artifacts_root)
# ----------------------------------------------------------------------
hydra:
  run:
    dir: ${paths.runs}/${now:%Y-%m-%d_%H-%M-%S}_submit
  sweep:
    dir: ${paths.artifacts_root}/sweeps
    subdir: ${hydra.job.num}
  job:
    name: "spectramind_v50_submit"

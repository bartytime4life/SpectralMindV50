# configs/model/v50.yaml
# ======================================================================
# SpectraMind V50 — Dual-Channel Fusion Model (upgraded)
# ----------------------------------------------------------------------
# Encoders:
#   • FGS1 (time-series; Mamba SSM)
#   • AIRS (spectral; GNN/CNN hybrid)
# Fusion:
#   • Cross-attention (FGS1 ↔ AIRS)
# Decoder:
#   • Heteroscedastic head (μ, σ) over 283 bins (FGS1 bin + 282 AIRS)
# ======================================================================

_target_: spectramind.models.v50.V50Model

# ------------------------------
# General
# ------------------------------
name: "spectramind_v50"
num_bins: 283
dropout: 0.10
hidden_dim: 512          # shared “model” hidden size used by fusion/decoder
latent_dim: 512          # <-- aligned to fusion output (fixed: was 256)
activation: gelu
sigma_min: 1.0e-4        # numerical floor for σ (clamp/epsilon)
fgs1_weight: 58.0        # white-light (bin 0) weight used by metric/loss

# ------------------------------
# FGS1 Encoder (time-series)
# ------------------------------
fgs1_encoder:
  _target_: spectramind.models.fgs1_mamba.FGS1Mamba
  input_dim: 1                # single-channel photometry
  hidden_dim: 128
  depth: 6
  state_dim: 64
  dropout: ${..dropout}
  norm: layer                 # optional: none|layer|rms

# ------------------------------
# AIRS Encoder (spectral)
# ------------------------------
airs_encoder:
  _target_: spectramind.models.airs_gnn.AIRSGNN
  input_dim: 283              # wavelength bins per observation
  hidden_dim: 128
  layers: 4
  dropout: ${..dropout}
  gnn_type: graphsage         # options: gcn|gat|graphsage
  edge_build: knn             # options: none|knn|radius (built at runtime)
  k: 8                        # only used if edge_build=knn

# ------------------------------
# Fusion (cross-attention)
# ------------------------------
fusion:
  _target_: spectramind.models.fusion_xattn.FusionXAttn
  hidden_dim: ${..hidden_dim}
  num_heads: 8
  depth: 2
  dropout: ${..dropout}
  # The fusion block emits a latent of size = hidden_dim (→ decoder.input_dim)

# ------------------------------
# Decoder Head (heteroscedastic)
# ------------------------------
decoder:
  _target_: spectramind.models.decoder_head.DecoderHead
  input_dim: ${...fusion.hidden_dim}   # <-- bind directly to fusion output
  hidden_dim: ${..hidden_dim}
  num_bins: ${..num_bins}
  dropout: ${..dropout}
  activation: ${..activation}
  output:
    mu: true
    sigma: true
    sigma_activation: softplus         # positive σ; clamp with sigma_min
    sigma_min: ${..sigma_min}

# ------------------------------
# Initialization / Regularization
# ------------------------------
init:
  type: xavier_uniform
  gain: 1.0
weight_norm: true
spectral_norm: false
stochastic_depth:
  enabled: false
  drop_rate: 0.0

# ------------------------------
# Debug / Sanity-check knobs
# ------------------------------
debug:
  freeze_encoders: false       # if true, only train fusion+decoder
  projector:
    enabled: false             # small MLP to align encoder dims if needed
    out_dim: ${..hidden_dim}

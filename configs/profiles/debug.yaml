# ==============================================================================
# SpectraMind V50 â€” Profile: Debug (fail-fast, tiny & loud)
# ------------------------------------------------------------------------------
# Usage:
#   python -m spectramind train +defaults='[/profiles/debug_failfast]'
#
# Purpose:
#   - Fastest possible sanity: 1 batch train/val, 1 epoch
#   - Force FP32; enable anomaly checks & profiler
#   - Deterministic loader to make crashes reproducible
# ==============================================================================

defaults:
  - /training/lightning: lightning
  - /training/precision: precision
  - /training/dataloader: dataloader
  - /training/logger: logger
  - /training/callbacks: callbacks
  - /training/optimizer: optimizer
  - /training/scheduler: scheduler

# Trainer: tiny loop, loud, fail-fast
trainer:
  max_epochs: 1
  limit_train_batches: 1
  limit_val_batches: 1
  log_every_n_steps: 1
  profiler: "simple"          # quick macro profiler
  detect_anomaly: true        # Lightning anomaly guard (NaN/Inf/backward)
  deterministic: true         # reproducible failure points
  benchmark: false            # no autotune in debug
  enable_progress_bar: true

# Precision: pure FP32, disable TF32; mirror anomaly flag in schema (if used)
precision:
  mode: "32-true"
  tf32:
    allow: false
    cudnn_allow: false
  safety:
    detect_anomaly: true

# DataLoader: deterministic & minimal
data_loader:
  num_workers: 0              # no forking, simpler stacks
  persistent_workers: false
  prefetch_factor: 2
  pin_memory: false

# Seed for reproducibility
seed: 123

# Optional: force even smaller slices (uncomment if dataset is large)
#limits:
#  train_batches: 1
#  val_batches: 1
#  test_batches: 1

experiment:
  name: ${oc.env:SM_EXPERIMENT_NAME, "debug-failfast"}
  tags: ${oc.env:SM_TAGS, ["profile:debug","fail-fast","precision=fp32","anomaly"]}

# ==============================================================================
# setup.cfg — SpectraMind V50 (hardened)
# ------------------------------------------------------------------------------
# Centralized config for:
#   • pytest   → quiet, strict, JUnit/coverage for CI
#   • flake8   → Black-compatible style + Bugbear
#   • mypy     → strict where practical; relaxed on CLI/pipeline/tests
#   • coverage → HTML/XML; sane concurrency
#   • isort    → Black profile
# ==============================================================================

[tool:pytest]
addopts =
    -q
    --disable-warnings
    --maxfail=1
    --strict-markers
    --strict-config
    --color=yes
    --durations=20
    --cache-clear
    --cov=src/spectramind
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=xml
    --cov-report=html
    --junitxml=reports/junit.xml
    -m "not slow"
testpaths =
    tests
    src/spectramind
log_cli = false
log_level = WARNING
junit_family = xunit2

filterwarnings =
    ignore::DeprecationWarning:pkg_resources
    ignore::DeprecationWarning:tensorboard
    ignore::UserWarning:pytorch_lightning
    ignore::UserWarning:torch
    ignore::FutureWarning:torch
    ignore::FutureWarning:numpy
    ignore::FutureWarning:pandas
    ignore::DeprecationWarning:torchmetrics
    ignore:.*distutils.*:DeprecationWarning

markers =
    slow: marks tests as slow (skipped by default)
    integration: marks tests requiring end-to-end or external assets
    kaggle: marks tests tailored for the Kaggle runtime
    gpu: marks tests requiring CUDA devices

# ------------------------------------------------------------------------------
# coverage.py
# ------------------------------------------------------------------------------
[coverage:run]
branch = True
source =
    src/spectramind
omit =
    */__init__.py
    */_version.py
    */.venv/*
    */venv/*
    */.tox/*
    */.mypy_cache/*
    */.ruff_cache/*
    */.pytest_cache/*
    */notebooks/*
    */docs/*
    */tests/*
    setup.py
    setup.cfg
    conftest.py
concurrency = thread, multiprocessing
# parallel = True  # enable if splitting coverage across CI shards

[coverage:report]
show_missing = True
skip_empty = True
precision = 2
exclude_lines =
    pragma: no cover
    if __name__ == "__main__":
    @overload
    @abstractmethod
    raise NotImplementedError
    ^\s*pass$
    ^\s*return NotImplemented$

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# ------------------------------------------------------------------------------
# flake8 (Black-compatible + Bugbear)
# Plugins recommended:
#   flake8-bugbear, flake8-docstrings, flake8-comprehensions,
#   flake8-annotations, flake8-import-order (or flake8-import-ascii)
# ------------------------------------------------------------------------------
[flake8]
max-line-length = 100
extend-ignore =
    E203,  # Black: whitespace before ':'
    W503,  # Black: line break before binary operator
    E501,  # Use B950 soft limit instead
    D107,  # __init__ docstrings optional
    D202,  # blank line after docstring (Black interaction)
    D401,  # first line imperative (relax for CLI/docs)
    D105,  # magic methods docstrings
    ANN101,  # missing type for self
    ANN102   # missing type for cls
extend-select = B,B950
exclude =
    .git,
    __pycache__,
    build,
    dist,
    .venv,
    .eggs,
    *.egg-info,
    .tox,
    notebooks,
    docs,
    .mypy_cache,
    .pytest_cache,
    .ruff_cache,
    .env,
    .direnv,
    data,
    assets
import-order-style = google
application-import-names = spectramind, tests
max-complexity = 10
docstring-convention = numpy
per-file-ignores =
    src/spectramind/__init__.py:F401
    src/spectramind/cli/__init__.py:F401
    src/spectramind/pipeline/__init__.py:F401
    tests/*:D1,D2,D3

# ------------------------------------------------------------------------------
# mypy (static typing)
# ------------------------------------------------------------------------------
[mypy]
python_version = 3.11
ignore_missing_imports = True
show_error_codes = True
warn_unused_configs = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_return_any = True
warn_no_return = True
disallow_untyped_defs = True
check_untyped_defs = True
no_implicit_optional = True
# dial up as code matures:
# disallow_any_generics = True
# strict_optional = True
# warn_unreachable = True

[mypy-spectramind.cli.*]
disallow_untyped_defs = False

[mypy-spectramind.pipeline.*]
disallow_untyped_defs = False

[mypy-tests.*]
disallow_untyped_defs = False
check_untyped_defs = False

[mypy-torch.*]
ignore_missing_imports = True
[mypy-pytorch_lightning.*]
ignore_missing_imports = True
[mypy-numpy.*]
ignore_missing_imports = True
[mypy-pandas.*]
ignore_missing_imports = True
[mypy-scipy.*]
ignore_missing_imports = True
[mypy-sklearn.*]
ignore_missing_imports = True
[mypy-torchmetrics.*]
ignore_missing_imports = True

# ------------------------------------------------------------------------------
# isort (Black profile)
# ------------------------------------------------------------------------------
[isort]
profile = black
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
combine_as_imports = true
known_first_party = spectramind,tests
default_section = THIRDPARTY
skip =
    .git,
    __pycache__,
    build,
    dist,
    .venv,
    .eggs,
    .tox,
    notebooks,
    docs,
    .mypy_cache,
    .pytest_cache,
    .ruff_cache,
    .env,
    .direnv,
    data,
    assets
# ==============================================================================
# dvc.yaml — SpectraMind V50 (Reproducible Pipeline)
# ------------------------------------------------------------------------------
# Stages:
#   calibrate → train → predict → (diagnose) → (submit)
#
# Conventions
# - All Hydra selectors live in params.yaml under `hydra.*`.
# - Use `dvc exp run -S hydra.env=kaggle -S hydra.model=v50 ...` for quick forks.
# - Calibrated tensors (`data/processed`) are `persist: true` to enable reuse.
# - Metrics are lightweight JSON; heavy logs go to outs_no_cache.
# - dvclive block is included (commented). Enable when you want live curves.
# ==============================================================================

stages:
  calibrate:
    desc: "Raw → calibrated tensors (FGS1 + AIRS) with physics-informed preprocessing"
    cmd: >
      spectramind calibrate
      --config-name ${params.hydra.config_name_calibrate}
      env=${params.hydra.env}
      data=${params.hydra.data}
      calib=${params.hydra.calib}
    deps:
      - configs/                # Hydra configs
      - src/                    # calibration code
      - data/raw                # raw telescope inputs (DVC-tracked)
    params:
      - hydra.config_name_calibrate
      - hydra.env
      - hydra.data
      - hydra.calib
    outs:
      - path: data/processed    # calibrated + preprocessed tensors
        persist: true

  train:
    desc: "Train dual-channel encoders + heteroscedastic decoder (μ, σ)"
    cmd: >
      spectramind train
      --config-name ${params.hydra.config_name_train}
      env=${params.hydra.env}
      data=${params.hydra.data}
      model=${params.hydra.model}
      training=${params.hydra.training}
      loss=${params.hydra.loss}
      logger=${params.hydra.logger}
    deps:
      - data/processed
      - configs/
      - src/
    params:
      - hydra.config_name_train
      - hydra.env
      - hydra.data
      - hydra.model
      - hydra.training
      - hydra.loss
      - hydra.logger
    outs:
      - path: artifacts/ckpt.pt         # checkpointed for `dvc exp run --rev` resumes
        checkpoint: true
      - path: artifacts/metrics.json    # final metrics snapshot for dashboards
        cache: true
    outs_no_cache:
      - logs/train/                     # structured JSONL logs (not cached)
    metrics:
      - artifacts/metrics.json:
          cache: false
          type: json
          xpath: .
    # Enable dvclive for live curves in CI (optional):
    # live:
    #   path: dvclive
    #   summary: true
    #   html: true

  predict:
    desc: "Run inference on processed data → predictions CSV"
    cmd: >
      spectramind predict
      --config-name ${params.hydra.config_name_predict}
      env=${params.hydra.env}
      data=${params.hydra.data}
    deps:
      - artifacts/ckpt.pt
      - data/processed
      - configs/
      - src/
    params:
      - hydra.config_name_predict
      - hydra.env
      - hydra.data
    outs:
      - path: outputs/preds.csv
        cache: true

  diagnose:
    desc: "Post-hoc diagnostics: GLL, FFT/UMAP, sanity checks, HTML report"
    cmd: >
      spectramind diagnose
      --config-name ${params.hydra.config_name_diagnose}
      env=${params.hydra.env}
      data=${params.hydra.data}
    deps:
      - artifacts/ckpt.pt
      - outputs/preds.csv
      - configs/
      - src/
    params:
      - hydra.config_name_diagnose
      - hydra.env
      - hydra.data
    outs:
      - path: artifacts/diagnostics/report.html
        cache: true
      - path: artifacts/diagnostics/plots/
        cache: true
    plots:
      - artifacts/diagnostics/plots/     # images/tsv rendered by diagnostics
    metrics:
      - artifacts/diagnostics/summary.json:
          cache: false
          type: json
          xpath: .

  submit:
    desc: "Package submission artifacts (CSV and/or ZIP)"
    cmd: >
      spectramind submit
      --config-name ${params.hydra.config_name_submit}
    deps:
      - outputs/preds.csv
      - configs/
      - src/
    params:
      - hydra.config_name_submit
    outs:
      - path: outputs/submission.csv
        cache: true
      # Optionally produce a zip alongside the CSV:
      # - path: outputs/submission.zip
      #   cache: true

# ==============================================================================
# dvc.yaml — SpectraMind V50 (Reproducible Pipeline, Refactored)
# ------------------------------------------------------------------------------
# Stages (expanded granularity):
#   calibrate → preprocess → train → predict → diagnose → submit
#
# Conventions
# - Hydra-like selectors (env/model/etc.) live in params.yaml under `hydra.*`.
# - Use:
#     dvc exp run \
#       -S hydra.env=kaggle \
#       -S hydra.model=v50 \
#       -S hydra.config_name_train=train
# - `data/calibrated` and `data/processed` are persisted (reuse & Kaggle packaging).
# - Keep metrics lightweight JSON; heavy logs → outs_no_cache.
# - CLI mapping (updated):
#     spectramind calibrate run <raw_dir> [--config ...] [--set k=v ...]
#     spectramind preprocess run <calib_dir> [--config ...] [--set k=v ...]
#     spectramind train run [--config ...] [--set k=v ...]
#     spectramind predict run <ckpt> [--out-csv ...]
#     spectramind diagnose run <preds_csv> [--truth ...] [--out-dir ...]
#     spectramind submit package <preds_csv> [--out-zip ...]
# ==============================================================================

stages:
  calibrate:
    desc: "Raw → CALIBRATED tensors (FGS1 + AIRS); physics-based calibration only"
    cmd: >
      spectramind calibrate run data/raw
      --set hydra.env=${params.hydra.env}
      --set hydra.data=${params.hydra.data}
      --set hydra.calib=${params.hydra.calib}
    deps:
      - configs/
      - src/
      - data/raw
    params:
      - hydra.env
      - hydra.data
      - hydra.calib
    outs:
      - path: data/calibrated
        persist: true

  preprocess:
    desc: "CALIBRATED → PROCESSED; detrend/normalize/bin/features"
    cmd: >
      spectramind preprocess run data/calibrated
      --set hydra.env=${params.hydra.env}
      --set hydra.data=${params.hydra.data}
      --set hydra.preprocess=${params.hydra.preprocess}
    deps:
      - data/calibrated
      - configs/
      - src/
    params:
      - hydra.env
      - hydra.data
      - hydra.preprocess
    outs:
      - path: data/processed
        persist: true

  train:
    desc: "Train dual-channel encoders + heteroscedastic decoder (μ, σ)"
    cmd: >
      spectramind train run
      --set hydra.env=${params.hydra.env}
      --set hydra.data=${params.hydra.data}
      --set hydra.model=${params.hydra.model}
      --set hydra.training=${params.hydra.training}
      --set hydra.loss=${params.hydra.loss}
      --set hydra.logger=${params.hydra.logger}
    deps:
      - data/processed
      - configs/
      - src/
    params:
      - hydra.env
      - hydra.data
      - hydra.model
      - hydra.training
      - hydra.loss
      - hydra.logger
    outs:
      - path: artifacts/ckpt.pt
        checkpoint: true
      - path: artifacts/metrics.json
        cache: true
    outs_no_cache:
      - logs/train/
    metrics:
      - artifacts/metrics.json:
          cache: false
          type: json
          xpath: .

  predict:
    desc: "Run inference on processed data → predictions CSV"
    cmd: >
      spectramind predict run artifacts/ckpt.pt
      --out-csv artifacts/predictions/preds.csv
      --set hydra.env=${params.hydra.env}
      --set hydra.data=${params.hydra.data}
    deps:
      - artifacts/ckpt.pt
      - data/processed
      - configs/
      - src/
    params:
      - hydra.env
      - hydra.data
    outs:
      - path: artifacts/predictions/preds.csv
        cache: true

  diagnose:
    desc: "Post-hoc diagnostics: GLL, sanity checks + JSON summary & HTML report"
    cmd: >
      spectramind diagnose run artifacts/predictions/preds.csv
      --out-dir artifacts/diagnostics
      --set hydra.env=${params.hydra.env}
      --set hydra.data=${params.hydra.data}
    deps:
      - artifacts/predictions/preds.csv
      - configs/
      - src/
    params:
      - hydra.env
      - hydra.data
    outs:
      - path: artifacts/diagnostics/report.html
        cache: true
      - path: artifacts/diagnostics/plots/
        cache: true
    plots:
      - artifacts/diagnostics/plots/
    metrics:
      - artifacts/diagnostics/summary.json:
          cache: false
          type: json
          xpath: .

  submit:
    desc: "Package submission artifacts (ZIP with MANIFEST); validate optionally upstream"
    cmd: >
      spectramind submit package artifacts/predictions/preds.csv
      --out-zip dist/submission.zip
    deps:
      - artifacts/predictions/preds.csv
      - configs/
      - src/
    outs:
      - path: dist/submission.zip
        cache: true

  package-precalibrated:
    desc: "Zip CALIBRATED tensors for Kaggle dataset attachment (runtime saver)"
    cmd: >
      bash scripts/package_precalibrated.sh data/calibrated artifacts/kaggle/precalibrated.zip
    deps:
      - data/calibrated
      - scripts/package_precalibrated.sh
    outs:
      - path: artifacts/kaggle/precalibrated.zip
        cache: true

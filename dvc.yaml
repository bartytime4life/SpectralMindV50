# ==============================================================================
# dvc.yaml — SpectraMind V50 (Reproducible Pipeline, Refactored)
# ------------------------------------------------------------------------------
# Stages (expanded granularity):
#   calibrate → preprocess → train → predict → diagnose → submit
#
# Conventions
# - Hydra selectors live in params.yaml under `hydra.*`.
# - Use dvc exp run -S hydra.env=kaggle -S hydra.model=v50 ...
# - data/calibrated and data/processed are persisted for reuse & Kaggle packaging.
# - Keep metrics lightweight JSON; heavy logs → outs_no_cache.
# ==============================================================================

stages:
  calibrate:
    desc: "Raw → CALIBRATED tensors (FGS1 + AIRS); physics-based calibration only"
    cmd: >
      spectramind calibrate
      --config-name ${params.hydra.config_name_calibrate}
      env=${params.hydra.env}
      data=${params.hydra.data}
      calib=${params.hydra.calib}
    deps:
      - configs/
      - src/
      - data/raw
    params:
      - hydra.config_name_calibrate
      - hydra.env
      - hydra.data
      - hydra.calib
    outs:
      - path: data/calibrated
        persist: true

  preprocess:
    desc: "CALIBRATED → PROCESSED; detrend/normalize/bin/features"
    cmd: >
      spectramind preprocess
      --config-name ${params.hydra.config_name_preprocess}
      env=${params.hydra.env}
      data=${params.hydra.data}
      preprocess=${params.hydra.preprocess}
    deps:
      - data/calibrated
      - configs/
      - src/
    params:
      - hydra.config_name_preprocess
      - hydra.env
      - hydra.data
      - hydra.preprocess
    outs:
      - path: data/processed
        persist: true

  train:
    desc: "Train dual-channel encoders + heteroscedastic decoder (μ, σ)"
    cmd: >
      spectramind train
      --config-name ${params.hydra.config_name_train}
      env=${params.hydra.env}
      data=${params.hydra.data}
      model=${params.hydra.model}
      training=${params.hydra.training}
      loss=${params.hydra.loss}
      logger=${params.hydra.logger}
    deps:
      - data/processed
      - configs/
      - src/
    params:
      - hydra.config_name_train
      - hydra.env
      - hydra.data
      - hydra.model
      - hydra.training
      - hydra.loss
      - hydra.logger
    outs:
      - path: artifacts/ckpt.pt
        checkpoint: true
      - path: artifacts/metrics.json
        cache: true
    outs_no_cache:
      - logs/train/
    metrics:
      - artifacts/metrics.json:
          cache: false
          type: json
          xpath: .

  predict:
    desc: "Run inference on processed data → predictions CSV"
    cmd: >
      spectramind predict
      --config-name ${params.hydra.config_name_predict}
      env=${params.hydra.env}
      data=${params.hydra.data}
    deps:
      - artifacts/ckpt.pt
      - data/processed
      - configs/
      - src/
    params:
      - hydra.config_name_predict
      - hydra.env
      - hydra.data
    outs:
      - path: outputs/preds.csv
        cache: true

  diagnose:
    desc: "Post-hoc diagnostics: GLL, FFT/UMAP, sanity checks, HTML report"
    cmd: >
      spectramind diagnose
      --config-name ${params.hydra.config_name_diagnose}
      env=${params.hydra.env}
      data=${params.hydra.data}
    deps:
      - artifacts/ckpt.pt
      - outputs/preds.csv
      - configs/
      - src/
    params:
      - hydra.config_name_diagnose
      - hydra.env
      - hydra.data
    outs:
      - path: artifacts/diagnostics/report.html
        cache: true
      - path: artifacts/diagnostics/plots/
        cache: true
    plots:
      - artifacts/diagnostics/plots/
    metrics:
      - artifacts/diagnostics/summary.json:
          cache: false
          type: json
          xpath: .

  submit:
    desc: "Package submission artifacts (CSV and/or ZIP)"
    cmd: >
      spectramind submit
      --config-name ${params.hydra.config_name_submit}
    deps:
      - outputs/preds.csv
      - configs/
      - src/
    params:
      - hydra.config_name_submit
    outs:
      - path: outputs/submission.csv
        cache: true

  package-precalibrated:
    desc: "Zip CALIBRATED tensors for Kaggle dataset attachment (runtime saver)"
    cmd: >
      bash scripts/package_precalibrated.sh data/calibrated artifacts/kaggle/precalibrated.zip
    deps:
      - data/calibrated
      - scripts/package_precalibrated.sh
    outs:
      - path: artifacts/kaggle/precalibrated.zip
        cache: true

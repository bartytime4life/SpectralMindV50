# ==============================================================================
# dvc.yaml — SpectraMind V50
# ------------------------------------------------------------------------------
# Reproducible pipeline:
#   calibrate → train → predict → (diagnose) → (submit)
#
# Tips
# - Put Hydra selectors in params.yaml (env/data/calib/model/training/loss/logger)
#   so `dvc exp show` / `dvc exp diff` track config changes cleanly.
# - `data/processed` is `persist: true` so downstream stages reuse it across runs.
# - Uncomment dvclive in `train` if you want live learning curves in CI.
# - Torch stack/bootstrap stays outside DVC (e.g., bin/kaggle-boot.sh).
# ==============================================================================

stages:
  calibrate:
    desc: "Raw → calibrated tensors (FGS1 + AIRS) with physics-informed preprocessing"
    cmd: >
      spectramind calibrate
      --config-name ${params.hydra.config_name_calibrate}
      env=${params.hydra.env}
      data=${params.hydra.data}
      calib=${params.hydra.calib}
    deps:
      - configs/              # hydra configs (data/calib/env/…)
      - src/                  # calibration code
      - data/raw              # raw telescope inputs (DVC-tracked)
    params:
      - hydra.config_name_calibrate
      - hydra.env
      - hydra.data
      - hydra.calib
    outs:
      - path: data/processed  # calibrated + preprocessed tensors
        persist: true

  train:
    desc: "Train dual-channel encoders + heteroscedastic decoder (μ, σ)"
    cmd: >
      spectramind train
      --config-name ${params.hydra.config_name_train}
      env=${params.hydra.env}
      data=${params.hydra.data}
      model=${params.hydra.model}
      training=${params.hydra.training}
      loss=${params.hydra.loss}
      logger=${params.hydra.logger}
    deps:
      - data/processed
      - configs/
      - src/
    params:
      - hydra.config_name_train
      - hydra.env
      - hydra.data
      - hydra.model
      - hydra.training
      - hydra.loss
      - hydra.logger
    # Mark as checkpointed so `dvc exp run` can resume/branch mid-training.
    outs:
      - path: artifacts/ckpt.pt
        checkpoint: true
      - path: artifacts/metrics.json
        cache: true
    outs_no_cache:
      - logs/train/           # structured run logs / JSONL events (no cache)
    metrics:
      - artifacts/metrics.json:
          cache: false
          type: json
          xpath: .
    # If you log with dvclive, enable this block for live curves:
    # live:
    #   path: dvclive
    #   summary: true
    #   html: true
    #   # DVC will auto-publish loss/metrics charts from dvclive/*.tsv

  predict:
    desc: "Run inference on processed data → predictions CSV"
    cmd: >
      spectramind predict
      --config-name ${params.hydra.config_name_predict}
      env=${params.hydra.env}
      data=${params.hydra.data}
    deps:
      - artifacts/ckpt.pt
      - data/processed
      - configs/
      - src/
    params:
      - hydra.config_name_predict
      - hydra.env
      - hydra.data
    outs:
      - path: outputs/preds.csv
        cache: true

  diagnose:
    desc: "Post-hoc diagnostics: GLL, FFT/UMAP, sanity checks, HTML report"
    cmd: >
      spectramind diagnose
      --config-name ${params.hydra.config_name_diagnose}
      env=${params.hydra.env}
      data=${params.hydra.data}
    deps:
      - artifacts/ckpt.pt
      - outputs/preds.csv
      - configs/
      - src/
    params:
      - hydra.config_name_diagnose
      - hydra.env
      - hydra.data
    outs:
      - path: artifacts/diagnostics/report.html
        cache: true
      - path: artifacts/diagnostics/plots/
        cache: true
    plots:
      # Visual assets (PNG/SVG/TSV) rendered by the diagnostics step
      - artifacts/diagnostics/plots/
    metrics:
      - artifacts/diagnostics/summary.json:
          cache: false
          type: json
          xpath: .

  submit:
    desc: "Package submission artifacts"
    cmd: >
      spectramind submit
      --config-name ${params.hydra.config_name_submit}
    deps:
      - outputs/preds.csv
      - configs/
      - src/
    params:
      - hydra.config_name_submit
    outs:
      - path: outputs/submission.csv
        cache: true
      # If you also zip for Kaggle/CI, add:
      # - path: outputs/submission.zip
      #   cache: true

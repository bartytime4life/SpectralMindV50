# 1) `requirements-kaggle.txt` (runtime, slim, Kaggle-safe)

> Torch / TorchVision / PyG are intentionally commented here and installed by `bin/kaggle-boot.sh` to match the Kaggle image + CUDA wheel matrix. Uncomment only if your runner is not Kaggle and you know the wheel triplet you need.

```txt
# ==============================================================================
# requirements-kaggle.txt — SpectraMind V50 (runtime)
# Slim, Kaggle-safe deps. Torch/TV/PyG are installed by bin/kaggle-boot.sh.
# ==============================================================================

# CLI & config
typer[all]==0.12.3
hydra-core==1.3.2
omegaconf==2.3.0
pydantic==2.7.4
pyyaml==6.0.1
jsonschema==4.22.0

# Core scientific
numpy==1.26.4
scipy==1.11.4
pandas==2.2.2

# Progress/UI
tqdm==4.66.4
rich==13.7.1

# Viz & analysis
matplotlib==3.8.4
umap-learn==0.5.6
networkx==3.2.1

# ⚠️ Torch stack handled by bin/kaggle-boot.sh for correct CUDA wheels:
# torch==2.8.0
# torchvision==0.17.2
# torch-geometric==2.5.3
```

# 2) `requirements-dev.txt` (local dev + CI)

> Superset including testing, linting, typing, and docs. Keep this out of Kaggle kernels; CI and local dev will use it.

```txt
# ==============================================================================
# requirements-dev.txt — SpectraMind V50 (dev/CI)
# Extends runtime with test, lint, type-check, docs.
# ==============================================================================

-r requirements-kaggle.txt

# Testing
pytest==8.3.2
pytest-cov==5.0.0

# Lint & format
flake8==7.1.0
flake8-docstrings==1.7.0
flake8-import-order==0.18.2
black==24.8.0
isort==5.13.2

# Types
mypy==1.10.0
types-PyYAML==6.0.12.20240808
types-requests==2.32.0.20240712

# Hooks
pre-commit==3.7.1

# Docs (optional)
mkdocs==1.6.0
mkdocs-material==9.5.28
```

# 3) (Optional) `constraints.txt` (pin resolver for CI)

> If you want fully deterministic solves in CI, add a constraints file and point pip at it (e.g., `pip install -r requirements-kaggle.txt -c constraints.txt`). You can just mirror the same pins:

```txt
typer[all]==0.12.3
hydra-core==1.3.2
omegaconf==2.3.0
pydantic==2.7.4
numpy==1.26.4
scipy==1.11.4
pandas==2.2.2
pyyaml==6.0.1
tqdm==4.66.4
rich==13.7.1
matplotlib==3.8.4
umap-learn==0.5.6
networkx==3.2.1
jsonschema==4.22.0
# torch==2.8.0
# torchvision==0.17.2
# torch-geometric==2.5.3
```

# Torch / TorchVision / PyG notes

* **Kaggle path:** our `bin/kaggle-boot.sh` script detects the CUDA/torch version preinstalled in the kernel and installs matching **torch-geometric** wheels reliably (no source builds). That’s why we keep torch/TV/PyG out of `requirements-kaggle.txt`.
* **Non-Kaggle runners:** if you’re provisioning your own GPU hosts, feel free to **uncomment** the three torch lines in `requirements-kaggle.txt` **or** add a host-specific `requirements-gpu.txt` and install that instead. Just ensure **torch ↔ torchvision ↔ CUDA** compatibility when pinning.

# Where this plugs into the repo

* `requirements-kaggle.txt` is used by **Kaggle notebooks** and in the **DVC pipeline** runtime stages to keep images lean and reproducible.
* `requirements-dev.txt` is used by **local dev** and **GitHub Actions** to run lint/tests/docs, matching our repo blueprint and CI patterns.

---

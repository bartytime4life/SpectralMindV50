name: ci

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'assets/**'
      - '.github/workflows/docs.yml'
      - '.github/workflows/release.yml'
      - '.github/workflows/kaggle_notebook_ci.yml'
      - '.github/workflows/kaggle-notebook-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'assets/**'
      - '.github/workflows/docs.yml'
      - '.github/workflows/release.yml'
      - '.github/workflows/kaggle_notebook_ci.yml'
      - '.github/workflows/kaggle-notebook-ci.yml'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  packages: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUTF8: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONHASHSEED: "0"

jobs:
  lint-test-typecheck:
    name: Lint • Typecheck • Unit Tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 35

    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            poetry.lock
            setup.cfg
            setup.py

      - name: Prime caches (mypy/pytest/ruff)
        uses: actions/cache@v4
        with:
          path: |
            .mypy_cache
            .pytest_cache
            .ruff_cache
          key: ${{ runner.os }}-${{ matrix.python-version }}-lintcache-${{ hashFiles('**/*.py', 'pyproject.toml', 'setup.cfg', 'mypy.ini', '.ruff.toml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # tools
          pip install ruff flake8 mypy pytest pytest-cov

      - name: Pre-commit (optional)
        if: hashFiles('.pre-commit-config.yaml') != ''
        run: |
          pip install pre-commit
          pre-commit run --all-files --show-diff-on-failure

      - name: Ruff (lint) → SARIF + check
        run: |
          ruff check src/ tests/
          ruff check src/ tests/ --output-format sarif > ruff.sarif || true

      - name: Flake8 (lint)
        run: flake8 src/ tests/

      - name: Typecheck (mypy)
        run: mypy src/

      - name: Run unit tests (pytest + coverage)
        env:
          SM_SUBMISSION_BINS: "283"
        run: |
          mkdir -p reports
          pytest -q --disable-warnings --maxfail=1 \
            --cov=src --cov-report=xml:reports/coverage.xml \
            --junitxml=reports/tests-junit.xml

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports-${{ matrix.python-version }}
          path: |
            ruff.sarif
            reports/
          retention-days: 14

      - name: Upload Ruff SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ruff.sarif

      - name: Publish Unit Test Results to Job Summary
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: reports/tests-junit.xml

      - name: Publish Coverage Summary to Job Summary
        if: always()
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: reports/coverage.xml
          format: markdown
          output: both

      - name: Upload coverage to Codecov (optional)
        if: ${{ secrets.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: reports/coverage.xml
          flags: unittests
          fail_ci_if_error: false

  build-and-import:
    name: Build package & import smoke test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [ lint-test-typecheck ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Build sdist/wheel
        run: |
          python -m pip install --upgrade pip build
          python -m build
          ls -lh dist/

      - name: Install built wheel and import
        run: |
          python -m pip install dist/*.whl
          python - <<'PY'
          import importlib, sys
          pkg = 'spectramind'
          importlib.import_module(pkg)
          print(f"Imported {pkg} OK with Python {sys.version.split()[0]}")
          PY

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/*
          retention-days: 7
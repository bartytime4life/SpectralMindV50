name: ci

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Default to least privilege; override per job when needed
permissions:
  contents: read
  security-events: write   # required for SARIF uploads (Code Scanning) and CodeQL
  packages: read
  actions: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUTF8: "1"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

jobs:
  lint-test-typecheck:
    name: Lint, Typecheck & Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            poetry.lock
            setup.cfg
            setup.py

      - name: Cache mypy & pytest
        uses: actions/cache@v4
        with:
          path: |
            .mypy_cache
            .pytest_cache
          key: ${{ runner.os }}-${{ matrix.python-version }}-mypy-pytest-${{ hashFiles('**/*.py', 'pyproject.toml', 'setup.cfg', 'mypy.ini') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-mypy-pytest-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Ensure CI toolchain is present (idempotent if already in -dev)
          pip install ruff flake8 mypy pytest pytest-cov

      - name: Pre-commit (optional)
        if: hashFiles('.pre-commit-config.yaml') != ''
        run: |
          pip install pre-commit
          pre-commit run --all-files --show-diff-on-failure

      - name: Ruff (lint) → SARIF + Check
        run: |
          # Fast human-readable check (fails on errors)
          ruff check src/ tests/
          # SARIF for code scanning (non-blocking)
          ruff check src/ tests/ --output-format sarif > ruff.sarif || true

      - name: Flake8 (lint)
        run: flake8 src/ tests/

      - name: Typecheck (mypy)
        run: mypy src/

      - name: Run unit tests (pytest + coverage)
        env:
          PYTHONHASHSEED: "0"
        run: |
          mkdir -p reports
          pytest -q --disable-warnings --maxfail=1 \
            --cov=src --cov-report=xml:reports/coverage.xml \
            --junitxml=reports/tests-junit.xml

      - name: Upload lint/test reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.python-version }}
          path: |
            ruff.sarif
            reports/
          retention-days: 14

      - name: Upload Ruff SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ruff.sarif

      - name: Publish Unit Test Results to Job Summary
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: reports/tests-junit.xml

      - name: Publish Coverage Summary to Job Summary
        if: always()
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: reports/coverage.xml
          format: markdown
          output: both

      - name: Upload coverage to Codecov (optional)
        if: ${{ always() && env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: reports/coverage.xml
          flags: unittests
          fail_ci_if_error: false

  integration:
    name: Integration Tests (DVC + CLI)
    runs-on: ubuntu-latest
    needs: lint-test-typecheck
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            poetry.lock

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install dvc[s3]  # add other remotes as needed (e.g., [azure,gdrive,ssh])

      - name: Verify DVC pipeline (dry-run)
        env:
          DVC_NO_ANALYTICS: "true"
        run: |
          dvc version
          dvc doctor
          dvc repro --dry

      - name: CLI smoke tests
        run: |
          python -m spectramind --help
          python -m spectramind calibrate --help
          python -m spectramind train --help
          python -m spectramind predict --help
          python -m spectramind diagnose --help
          python -m spectramind submit --help

  security:
    name: Security Scans (pip-audit + CodeQL)
    runs-on: ubuntu-latest
    needs: lint-test-typecheck
    timeout-minutes: 35
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            poetry.lock

      - name: Install pip-audit
        run: pip install --upgrade pip-audit

      - name: pip-audit → SARIF (non-failing)
        run: |
          mkdir -p security
          if [ -f requirements-dev.txt ]; then pip-audit -r requirements-dev.txt --format sarif -o security/pip-audit.dev.sarif || true; fi
          if [ -f requirements.txt ]; then pip-audit -r requirements.txt --format sarif -o security/pip-audit.main.sarif || true; fi

      - name: Upload pip-audit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze (CodeQL)
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:python'

  sbom:
    name: SBOM (CycloneDX)
    runs-on: ubuntu-latest
    needs: lint-test-typecheck
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            poetry.lock
            setup.cfg
            setup.py

      - name: Install CycloneDX
        run: |
          python -m pip install --upgrade cyclonedx-bom

      - name: Generate SBOM (JSON)
        run: |
          mkdir -p reports
          cyclonedx-bom -r -o reports/sbom.json || true

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: reports/sbom.json
          retention-days: 14
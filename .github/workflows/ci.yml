name: ci

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write   # required for Code Scanning SARIF + CodeQL
  packages: read
  actions: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-test-typecheck:
    name: Lint, Typecheck & Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Tools used by this workflow if not already in -dev
          pip install ruff flake8 mypy pytest pytest-cov

      - name: Ruff (lint) → SARIF + Check
        run: |
          # Human-readable check (fails on errors)
          ruff check src/ tests/
          # SARIF for code scanning (non-blocking)
          ruff check src/ tests/ --output-format sarif > ruff.sarif || true

      - name: Flake8 (lint)
        run: flake8 src/ tests/

      - name: Typecheck (mypy)
        run: mypy src/

      - name: Run unit tests (pytest + coverage)
        run: |
          mkdir -p reports
          pytest -q --disable-warnings --maxfail=1 \
            --cov=src --cov-report=xml:reports/coverage.xml \
            --junitxml=reports/tests-junit.xml
        env:
          PYTHONHASHSEED: "0"

      - name: Upload lint/test reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.python-version }}
          path: |
            ruff.sarif
            reports/

      - name: Upload Ruff SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ruff.sarif

  integration:
    name: Integration Tests (DVC + CLI)
    runs-on: ubuntu-latest
    needs: lint-test-typecheck
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt dvc[s3]

      - name: Verify DVC pipeline (dry-run)
        run: |
          dvc doctor
          dvc repro --dry

      - name: CLI smoke tests
        run: |
          python -m spectramind --help
          python -m spectramind calibrate --help
          python -m spectramind train --help
          python -m spectramind predict --help
          python -m spectramind diagnose --help
          python -m spectramind submit --help

  security:
    name: Security Scans (pip-audit + CodeQL)
    runs-on: ubuntu-latest
    needs: lint-test-typecheck
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install pip-audit
        run: pip install --upgrade pip-audit

      - name: pip-audit → SARIF (non-failing)
        run: |
          mkdir -p security
          # Generate SARIF for Code Scanning; do not fail the build.
          if [ -f requirements-dev.txt ]; then pip-audit -r requirements-dev.txt --format sarif -o security/pip-audit.sarif || true; fi
          if [ -f requirements.txt ]; then pip-audit -r requirements.txt --format sarif -o security/pip-audit-main.sarif || true; fi

      - name: Upload pip-audit SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze (CodeQL)
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:python'

  sbom:
    name: SBOM (CycloneDX)
    runs-on: ubuntu-latest
    needs: lint-test-typecheck
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Install CycloneDX
        run: |
          python -m pip install --upgrade cyclonedx-bom

      - name: Generate SBOM (JSON)
        run: |
          mkdir -p reports
          # -r → include transitive dependencies; -e → include environment details if present
          cyclonedx-bom -r -o reports/sbom.json || true

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: reports/sbom.json
          retention-days: 14
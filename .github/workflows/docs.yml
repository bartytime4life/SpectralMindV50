name: docs

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'assets/diagrams/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'assets/diagrams/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

# Minimal perms for Pages + OIDC + SARIF (for optional linkcheck upload)
permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write

concurrency:
  group: docs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  spellcheck:
    name: Spellcheck (typos)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5
      - name: typos
        uses: crate-ci/typos@v1
        with:
          files: |
            docs
            mkdocs.yml
          config: typos.toml
        # Create a baseline config later if you need to silence project words

  markdownlint:
    name: Markdown lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5
      - name: markdownlint-cli2
        uses: DavidAnson/markdownlint-cli2-action@v18
        with:
          globs: |
            docs/**/*.md
            README.md
          config: .markdownlint.jsonc

  linkcheck:
    name: External link check (lychee)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Cache lychee URL cache
        uses: actions/cache@v4
        with:
          path: .lycheecache
          key: lychee-${{ runner.os }}-${{ hashFiles('docs/**/*.md', 'mkdocs.yml', '.lychee.toml') }}
          restore-keys: |
            lychee-${{ runner.os }}-

      - name: Lychee (cached)
        id: lychee
        uses: lycheeverse/lychee-action@v2
        with:
          args: >
            --verbose
            --no-progress
            --exclude-mail
            --max-concurrency 8
            --cache
            --cache-dir .lycheecache
            --retry-wait-time 2
            --max-retries 3
            --timeout 20
            --accept 200..399,429
            "docs/**/*.md" "mkdocs.yml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload lychee report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lychee-report
          path: |
            ./lychee/results.md
            ./lychee/output.json
          if-no-files-found: ignore
          retention-days: 7

      # Optional: surface linkcheck to Code Scanning (requires lychee -> SARIF conversion)
      # - name: Upload linkcheck SARIF
      #   if: always()
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: lychee.sarif

  build:
    name: Build MkDocs site
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [spellcheck, markdownlint, linkcheck]
    steps:
      - name: Checkout source
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            docs/requirements.txt
            requirements-docs.txt
            mkdocs.yml

      - name: Install Python doc deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          if [ -f docs/requirements.txt ]; then
            pip install -r docs/requirements.txt
          elif [ -f requirements-docs.txt ]; then
            pip install -r requirements-docs.txt
          else
            # Pinned safe defaults; extend as needed
            pip install \
              "mkdocs==1.6.1" \
              "mkdocs-material==9.5.34" \
              "mkdocs-material-extensions==1.3.1" \
              "mkdocs-mermaid2-plugin==1.2.2" \
              "mkdocs-minify-plugin==0.8.0"
          fi

      - name: Set up Node (for Mermaid CLI pre-render of assets)
      # Only if there are .mmd files in assets/diagrams
        if: ${{ hashFiles('assets/diagrams/**/*.mmd') != '' }}
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Mermaid CLI (mmdc)
        if: ${{ hashFiles('assets/diagrams/**/*.mmd') != '' }}
        run: npm i -g @mermaid-js/mermaid-cli@10

      - name: Pre-render Mermaid diagrams in assets (SVG)
        if: ${{ hashFiles('assets/diagrams/**/*.mmd') != '' }}
        run: |
          set -euo pipefail
          OUTDIR="assets/diagrams/_rendered"
          mkdir -p "$OUTDIR"
          while IFS= read -r -d '' f; do
            rel="${f#assets/diagrams/}"
            base="${rel%.*}"
            mkdir -p "$OUTDIR/$(dirname "$rel")"
            mmdc -i "$f" -o "$OUTDIR/${base}.svg" -b transparent
            echo "Rendered: $f -> $OUTDIR/${base}.svg"
          done < <(find assets/diagrams -name '*.mmd' -type f -print0)

      - name: Build MkDocs site (strict)
        env:
          MKDOCS_CONFIG_FILE: mkdocs.yml
        run: |
          mkdocs build --strict --verbose

      - name: Upload site artifact (Pages)
        uses: actions/upload-pages-artifact@v4
        with:
          path: site

      - name: Upload site as PR artifact (preview)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: site-preview
          path: site
          retention-days: 7

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
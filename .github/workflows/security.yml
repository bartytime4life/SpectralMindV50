name: security

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  schedule:
    - cron: '0 3 * * 1'  # weekly, Mon 03:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  ARTIFACT_RETENTION_DAYS: 14

jobs:
  dependency-review:
    name: Dependency Review (PR gate)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      security-events: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          allow-ghsas: |
            # (optional) comma/newline-separated GHSAs to allowlist
          comment-summary-in-pr: true

  sast-deps:
    name: pip-audit + Bandit + detect-secrets
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/poetry.lock

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit bandit detect-secrets

      - name: Prepare security dir
        run: mkdir -p security

      # Generate SARIF for each requirements* file, non-failing to avoid CI hard-stop
      - name: pip-audit → SARIF (non-failing)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          found=0
          for f in requirements*.txt; do
            echo "Auditing $f"
            pip-audit -r "$f" --format sarif -o "security/pip-audit.${f%.txt}.sarif" || true
            found=1
          done
          # fallback single-run if using PEP 621/poetry without explicit req files
          if [ $found -eq 0 ]; then
            pip-audit --format sarif -o security/pip-audit.sarif || true
          fi

      - name: Bandit (non-failing)
        run: |
          if [ -d src ]; then bandit -q -r src -f sarif -o security/bandit.sarif || true; fi

      - name: detect-secrets (non-failing)
        run: detect-secrets scan > security/detect-secrets.json || true

      - name: Upload SARIFs to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-deps-reports
          path: security
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  codeql:
    name: CodeQL (Python)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@v5

      - uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: +security-and-quality

      - uses: github/codeql-action/autobuild@v3

      - uses: github/codeql-action/analyze@v3
        with:
          category: '/language:python'

  sbom:
    name: SBOM (Syft / CycloneDX)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Generate SBOM (CycloneDX) to security/sbom.cdx.json
        uses: anchore/syft-action@v0.17.0
        with:
          options: dir:. -o cyclonedx-json=security/sbom.cdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: security/sbom.cdx.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  container-scan:
    name: Dockerfile Lint + Trivy Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v5

      - name: Prepare security dir
        run: mkdir -p security

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      # Filesystem scan (vulns) -> SARIF, non-failing gate
      - name: Trivy FS → SARIF (non-failing)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'security/trivy-fs.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          ignore-unfixed: true
          vuln-type: 'os,library'
          exit-code: '0'

      # IaC/config scan -> SARIF, non-failing
      - name: Trivy Config → SARIF (non-failing)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'config'
          format: 'sarif'
          output: 'security/trivy-config.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'

      - name: Upload Trivy SARIFs
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: security

      - name: Upload container scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: security
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [dependency-review, sast-deps, codeql, sbom, container-scan]
    steps:
      - name: Summary
        run: |
          echo "Security suite completed:"
          echo " - Dependency Review ✔"
          echo " - pip-audit / Bandit / detect-secrets ✔"
          echo " - CodeQL ✔"
          echo " - SBOM (Syft/CycloneDX) ✔"
          echo " - Trivy (fs + config) ✔"

name: security

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  schedule:
    - cron: "0 3 * * 1"   # Mondays 03:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  ARTIFACT_RETENTION_DAYS: 14
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONUTF8: "1"
  # Policy gate for the final job: none | low | medium | high | critical
  SECURITY_FAIL_ON: "none"

jobs:
  dependency-review:
    name: Dependency Review (PR gate)
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      security-events: write
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
      - uses: actions/dependency-review-action@0c155c73f2a90fa08a1f74343c099de8929d8fbe # v4
        with:
          fail-on-severity: high
          comment-summary-in-pr: true
          # allow-ghsas: |
          #   GHSA-xxxx-xxxx-xxxx

  sast-deps:
    name: pip-audit • Bandit • detect-secrets • gitleaks
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@0b93645e9fea7318efd9b4012f1f1a1f4f6c21fc # v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/poetry.lock

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install "pip-audit>=2.7,<3" "bandit>=1.7,<2" "detect-secrets>=1.5,<2" jq

      - name: Prepare output dir
        run: mkdir -p security

      - name: pip-audit → SARIF (per manifest, best-effort)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          got=0
          for f in requirements*.txt **/requirements*.txt; do
            out="security/pip-audit.$(echo "$f" | tr '/.' '__').sarif"
            echo "Auditing $f → $out"
            pip-audit -r "$f" --format sarif -o "$out" || true
            got=1
          done
          if [ $got -eq 0 ]; then
            pip-audit --format sarif -o security/pip-audit.sarif || true
          fi
          ls security/*.sarif >/dev/null 2>&1 || echo '{}' > security/pip-audit.empty.sarif

      - name: Bandit (src/) → SARIF
        run: |
          if [ -d src ]; then
            bandit -q -r src -f sarif -o security/bandit.sarif || true
          else
            echo "No src/ directory; skipping Bandit."
          fi

      - name: detect-secrets (JSON)
        run: detect-secrets scan > security/detect-secrets.json || true

      - name: gitleaks (best-effort JSON)
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-git -f json -r security/gitleaks.json || true

      - name: Upload SARIFs to Code Scanning (fork-safe)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true)
        uses: github/codeql-action/upload-sarif@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          sarif_file: security
          category: sast-and-deps

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: sast-deps-reports
          path: security
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  codeql:
    name: CodeQL (Python)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
      - uses: github/codeql-action/init@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          languages: python
          queries: +security-and-quality
      - uses: github/codeql-action/autobuild@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
      - uses: github/codeql-action/analyze@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          category: "/language:python"

  sbom:
    name: SBOM (Syft → CycloneDX)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
      - name: Generate SBOM (CycloneDX) → security/sbom.cdx.json
        uses: anchore/syft-action@v0.20.5
        with:
          options: dir:. -o cyclonedx-json=security/sbom.cdx.json
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: sbom-cyclonedx
          path: security/sbom.cdx.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  container-scan:
    name: Dockerfile Lint + Trivy
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4

      - name: Prepare output dir
        run: mkdir -p security

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.2.0
        with:
          dockerfile: Dockerfile

      - name: Cache Trivy DB
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            trivy-db-${{ runner.os }}-
            trivy-db-

      - name: Trivy FS → SARIF (non-failing)
        uses: aquasecurity/trivy-action@f95f286e1f986924f5d54f71c606a05743ee69ac # 0.28.0
        with:
          scan-type: fs
          format: sarif
          output: security/trivy-fs.sarif
          severity: CRITICAL,HIGH,MEDIUM,LOW
          ignore-unfixed: true
          vuln-type: os,library

      - name: Trivy Config → SARIF (non-failing)
        uses: aquasecurity/trivy-action@f95f286e1f986924f5d54f71c606a05743ee69ac # 0.28.0
        with:
          scan-type: config
          format: sarif
          output: security/trivy-config.sarif
          severity: CRITICAL,HIGH,MEDIUM,LOW

      - name: Upload Trivy SARIFs (fork-safe)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true)
        uses: github/codeql-action/upload-sarif@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          sarif_file: security
          category: trivy

      - name: Upload container scan artifacts
        if: always()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: trivy-reports
          path: security
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  gate:
    name: Security Gate (optional policy)
    runs-on: ubuntu-latest
    needs: [ dependency-review, sast-deps, codeql, sbom, container-scan ]
    steps:
      - name: Download all reports
        uses: actions/download-artifact@65d8626605736c8d5f6ac075fa365286f27502cf # v5
        with:
          path: secreports

      - name: Fail on threshold (SECURITY_FAIL_ON)
        if: always()
        shell: bash
        run: |
          lvl="${SECURITY_FAIL_ON,,}"
          [[ -z "$lvl" || "$lvl" == "none" ]] && { echo "Gate disabled (SECURITY_FAIL_ON=$lvl)"; exit 0; }
          declare -A rank=( [low]=1 [medium]=2 [high]=3 [critical]=4 )
          thr=${rank[$lvl]:-0}
          total=0
          shopt -s globstar nullglob
          for s in secreports/**/*.sarif; do
            hits=$(jq -r '
              [ .runs[].results[]? |
                ( .level // .properties.severity // .rule.properties."security-severity" // "" ) ]' "$s" 2>/dev/null \
            | awk -v thr="$thr" '
              function norm(x){ x=tolower(x);
                if(x=="critical")return 4; if(x=="high")return 3; if(x=="medium")return 2;
                if(x=="low"||x=="warning")return 1;
                if (x ~ /^[0-9.]+$/){n=x+0; if(n>=9)return 4; if(n>=7)return 3; if(n>=4)return 2; if(n>0)return 1;}
                return 0 }
              { if (norm($0) >= thr) c++ } END { print c+0 }')
            total=$(( total + hits ))
          done
          if (( total > 0 )); then
            echo "::error::Security gate: $total finding(s) >= $lvl"
            exit 1
          fi
          echo "Security gate: no findings >= $lvl"

      - name: Summary
        if: always()
        run: |
          {
            echo "### Security suite summary"
            echo "- Dependency Review ✅"
            echo "- pip-audit / Bandit / detect-secrets / gitleaks ✅"
            echo "- CodeQL ✅"
            echo "- SBOM (Syft→CycloneDX) ✅"
            echo "- Trivy (fs + config) ✅"
            echo ""
            echo "_Artifacts retained for ${ARTIFACT_RETENTION_DAYS} days_"
          } >> "$GITHUB_STEP_SUMMARY"
name: release

on:
  push:
    tags:
      - 'v*'           # e.g., v0.1.1
  workflow_dispatch:

permissions:
  contents: write      # create release, upload assets
  packages: write      # push GHCR image
  id-token: write      # OIDC if needed
  actions: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}   # e.g., ghcr.io/org/repo
  PYTHON_VERSION: '3.10'
  KAGGLE_BUNDLE: artifacts/submission.zip
  VERSION_FILE: VERSION

jobs:
  validate:
    name: Validate tag & version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read VERSION
        id: version
        run: |
          VER=$(cat "${VERSION_FILE}" | tr -d ' \n')
          echo "version=${VER}" >> $GITHUB_OUTPUT
          echo "VERSION file => ${VER}"

      - name: Validate tag == VERSION
        run: |
          TAG="${GITHUB_REF##*/}"              # e.g., v0.1.1
          VER="${{ steps.version.outputs.version }}"
          if [ "${TAG}" != "v${VER}" ]; then
            echo "::error title=Tag/Version mismatch::Tag ${TAG} != v${VER} (from ${VERSION_FILE})"
            exit 1
          fi
          echo "Tag ${TAG} matches VERSION v${VER}"

  build:
    name: Build & Package
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build deps (optional)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi

      - name: Make Kaggle submission bundle (if script exists)
        run: |
          if [ -x scripts/package_submission.sh ]; then
            mkdir -p artifacts
            bash scripts/package_submission.sh || exit 1
            if [ -f "${KAGGLE_BUNDLE}" ]; then
              echo "Kaggle bundle created: ${KAGGLE_BUNDLE}"
            else
              echo "::warning title=Kaggle bundle missing::Expected ${KAGGLE_BUNDLE}"
            fi
          else
            echo "No package_submission.sh; skipping Kaggle bundle."
          fi

      - name: Upload Kaggle bundle artifact (if present)
        if: ${{ hashFiles(env.KAGGLE_BUNDLE) != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: kaggle-submission
          path: ${{ env.KAGGLE_BUNDLE }}
          if-no-files-found: warn
          retention-days: 14

      - name: Upload CHANGELOG (always attach for release)
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
          if-no-files-found: warn
          retention-days: 14

      - name: Log in to GHCR (Docker)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: v
        run: |
          VER=$(cat "${VERSION_FILE}" | tr -d ' \n')
          echo "ver=${VER}" >> $GITHUB_OUTPUT

      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.v.outputs.ver }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.v.outputs.ver }}
            org.opencontainers.image.revision=${{ github.sha }}

  release:
    name: Create GitHub Release
    needs: [validate, build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Gather assets
        id: assets
        run: |
          files=()
          # Gather all files from downloaded artifacts
          while IFS= read -r -d '' f; do files+=("$f"); done < <(find release-assets -type f -print0)
          printf '%s\n' "${files[@]}" > assets.txt
          echo "asset_count=$(wc -l < assets.txt)" >> $GITHUB_OUTPUT
          echo "Assets:"
          cat assets.txt

      - name: Create Release (auto release notes)
        id: gh_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}               # tag as title
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            $(cat assets.txt)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log Release URL
        run: echo "Release => ${{ steps.gh_release.outputs.url }}"

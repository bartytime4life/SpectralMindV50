name: release

on:
  push:
    tags:
      - 'v*'              # e.g. v1.2.0, v1.2.0-rc.1
  workflow_dispatch:

# Least privilege by default; escalate per job only when needed
permissions:
  contents: read
  actions: read
  packages: read
  id-token: none
  security-events: none

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHON_VERSION: '3.11'
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  VERSION_FILE: VERSION
  KAGGLE_BUNDLE: artifacts/submission.zip
  ARTIFACT_RETENTION_DAYS: 30
  # Set to "linux/amd64,linux/arm64" for multi-arch
  RELEASE_PLATFORMS: 'linux/amd64'

jobs:
  validate:
    name: Validate tag & VERSION
    runs-on: ubuntu-latest
    permissions: { contents: read }
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      ver: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.prerelease.outputs.prerelease }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Extract tag
        id: tag
        run: echo "tag=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Read VERSION
        id: version
        run: |
          test -f "${{ env.VERSION_FILE }}" || { echo "::error::Missing ${{ env.VERSION_FILE }}"; exit 1; }
          VER="$(tr -d ' \n' < "${{ env.VERSION_FILE }}")"
          test -n "$VER" || { echo "::error::VERSION is empty"; exit 1; }
          echo "version=$VER" >> "$GITHUB_OUTPUT"
          echo "VERSION => $VER"

      - name: Validate tag == v$(cat VERSION)
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          VER="${{ steps.version.outputs.version }}"
          if [ "$TAG" != "v$VER" ]; then
            echo "::error title=Tag/Version mismatch::Tag $TAG != v$VER"; exit 1;
          fi
          echo "✅ Tag $TAG matches VERSION v$VER"

      - name: Determine pre-release (hyphen means prerelease)
        id: prerelease
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+- ]] && P=true || P=false
          echo "prerelease=$P" >> "$GITHUB_OUTPUT"

  build:
    name: Build & Package
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      contents: write      # upload artifacts
      packages: write      # push GHCR image
      id-token: write      # keyless signing/attestations
    outputs:
      ver: ${{ steps.v.outputs.ver }}
      image_digest: ${{ steps.buildx.outputs.digest }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            **/pyproject.toml
            **/setup.cfg
            **/setup.py
            **/requirements*.txt

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build wheel + sdist
        run: |
          python -m build
          twine check dist/*
          ls -lh dist/

      - name: Generate SHA256SUMS for dist/*
        working-directory: dist
        run: |
          : > SHA256SUMS.txt
          for f in *; do sha256sum "$f" >> SHA256SUMS.txt; done
          cat SHA256SUMS.txt

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign Python dist (keyless via OIDC)
        working-directory: dist
        env: { COSIGN_EXPERIMENTAL: "true" }
        run: |
          for f in *; do
            cosign sign-blob --yes "$f" \
              --output-signature "$f.sig" \
              --output-certificate "$f.cert"
          done

      - name: Make Kaggle submission bundle (if script exists)
        run: |
          if [ -x scripts/package_submission.sh ]; then
            mkdir -p artifacts
            bash scripts/package_submission.sh
            test -f "${{ env.KAGGLE_BUNDLE }}" || echo "::warning::Kaggle bundle expected at ${{ env.KAGGLE_BUNDLE }} not found"
            ( cd artifacts && [ -f "$(basename "${{ env.KAGGLE_BUNDLE }}")" ] && sha256sum "$(basename "${{ env.KAGGLE_BUNDLE }}")" > SUBMISSION.SHA256SUM || true )
          else
            echo "No scripts/package_submission.sh; skipping Kaggle bundle."
          fi

      - name: Upload Python dist (+sigs)
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/*
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Upload Kaggle bundle (if present)
        if: ${{ hashFiles(env.KAGGLE_BUNDLE) != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: kaggle-submission
          path: |
            ${{ env.KAGGLE_BUNDLE }}
            artifacts/SUBMISSION.SHA256SUM
          retention-days: 14

      - name: Upload diagnostics & metrics (if present)
        uses: actions/upload-artifact@v4
        with:
          name: diagnostics-and-metrics
          path: |
            artifacts/**/*.html
            artifacts/**/*.json
            metrics/**/*.json
          if-no-files-found: ignore
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      # ---------- Container build & push (GHCR) ----------
      - name: Docker login (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.validate.outputs.tag }}
            type=semver,pattern={{version}},value=${{ needs.validate.outputs.tag }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.title=SpectraMind V50
            org.opencontainers.image.description=NeurIPS 2025 Ariel Data Challenge — Spectral extraction & submission toolkit
            org.opencontainers.image.version=${{ needs.validate.outputs.tag }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=Apache-2.0

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (with SBOM + provenance)
        id: buildx
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.RELEASE_PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract version
        id: v
        run: echo "ver=$(tr -d ' \n' < "${{ env.VERSION_FILE }}")" >> "$GITHUB_OUTPUT"

      - name: Sign images (keyless default)
        if: ${{ !secrets.COSIGN_PRIVATE_KEY }}
        env: { COSIGN_EXPERIMENTAL: "true" }
        run: |
          cosign sign --yes "${{ env.IMAGE_NAME }}:${{ steps.v.outputs.ver }}"
          cosign sign --yes "${{ env.IMAGE_NAME }}:latest"

      - name: Sign images (key-based)
        if: ${{ secrets.COSIGN_PRIVATE_KEY }}
        env: { COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }} }
        run: |
          printf '%s' "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          cosign sign --key cosign.key "${{ env.IMAGE_NAME }}:${{ steps.v.outputs.ver }}"
          cosign sign --key cosign.key "${{ env.IMAGE_NAME }}:latest"

      - name: Attest build provenance (GitHub attestation)
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.buildx.outputs.digest }}
          push-to-registry: true

  scan:
    name: Trivy FS & Image Scan
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write   # for SARIF upload
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trivy (filesystem)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-fs.sarif
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: Trivy (image)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ needs.build.outputs.ver }}
          format: sarif
          output: trivy-image.sarif
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

      - name: Upload Trivy SARIF (FS)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      - name: Upload Trivy SARIF (Image)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

  sbom:
    name: Generate SBOMs (+ attest)
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Repo SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@v0.20.5
        with:
          path: .
          output-file: sbom-repo.json
          format: cyclonedx-json

      - name: Python deps SBOM (CycloneDX)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
      - run: |
          pip install cyclonedx-bom
          cyclonedx-bom -o sbom-python.json || true

      - name: Image SBOM (Syft → CycloneDX)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v1.16.0
          syft "${{ env.IMAGE_NAME }}:${{ needs.build.outputs.ver }}" -o cyclonedx-json > sbom-image.json || true

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sboms
          path: |
            sbom-repo.json
            sbom-python.json
            sbom-image.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cosign attest SBOM to image (optional best-effort)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          if [ -s sbom-image.json ]; then
            cosign attest --yes \
              --predicate sbom-image.json \
              --type cyclonedx \
              "${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image_digest }}"
          else
            echo "No image SBOM to attest."
          fi

  verify-dist:
    name: Verify dist checksums & signatures
    needs: build
    runs-on: ubuntu-latest
    if: ${{ secrets.PYPI_API_TOKEN != '' || secrets.TEST_PYPI_API_TOKEN != '' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Download python dist
        uses: actions/download-artifact@v5
        with:
          name: python-dist
          path: dist

      - name: Verify checksums
        working-directory: dist
        run: sha256sum -c SHA256SUMS.txt

      - name: Verify signatures (OIDC, repo subject)
        working-directory: dist
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          for f in *; do
            [ -f "$f.sig" ] || continue
            cosign verify-blob \
              --certificate "$f.cert" \
              --signature "$f.sig" \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
              "$f"
          done

  release:
    name: Create GitHub Release
    needs: [validate, build, sbom, scan]
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with: { path: release-assets }

      - name: Flatten artifacts into assets/
        id: gather
        run: |
          mkdir -p assets
          shopt -s globstar nullglob
          for f in release-assets/**/*; do [ -f "$f" ] && cp -v "$f" assets/; done
          echo "${{ needs.build.outputs.image_digest }}" > assets/image-digest.txt
          echo "count=$(ls -1 assets | wc -l)" >> "$GITHUB_OUTPUT"
          ls -l assets || true

      - name: Create Release (auto notes)
        id: gh_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.validate.outputs.tag }}
          tag_name: ${{ needs.validate.outputs.tag }}
          draft: false
          prerelease: ${{ needs.validate.outputs.prerelease }}
          generate_release_notes: true
          files: assets/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log Release URL
        run: echo "Release => ${{ steps.gh_release.outputs.url }}"

  docs:
    name: Build & Publish Docs
    needs: validate
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}   # only on version tags
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install mkdocs + plugins
        run: |
          pip install mkdocs mkdocs-material mkdocs-git-revision-date-localized-plugin || true

      - name: Build docs
        run: mkdocs build --strict

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: site
          publish_branch: gh-pages
          keep_files: false
          commit_message: "docs: publish ${{ needs.validate.outputs.tag }}"

  testpypi-publish:
    name: Publish to TestPyPI (optional)
    needs: [validate, build, verify-dist]
    runs-on: ubuntu-latest
    if: ${{ secrets.TEST_PYPI_API_TOKEN != '' }}
    permissions: { contents: read }
    steps:
      - name: Download python dist
        uses: actions/download-artifact@v5
        with:
          name: python-dist
          path: dist

      - name: Verify checksums
        working-directory: dist
        run: sha256sum -c SHA256SUMS.txt

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          repository-url: https://test.pypi.org/legacy/
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true

  pypi-publish:
    name: Publish to PyPI (optional)
    needs: [validate, build, verify-dist, testpypi-publish]
    runs-on: ubuntu-latest
    if: ${{ secrets.PYPI_API_TOKEN != '' }}
    permissions: { contents: read }
    steps:
      - name: Download python dist
        uses: actions/download-artifact@v5
        with:
          name: python-dist
          path: dist

      - name: Verify checksums
        working-directory: dist
        run: sha256sum -c SHA256SUMS.txt

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
name: sbom-refresh

on:
  schedule:
    - cron: '0 6 * * 1'     # Every Monday at 06:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write     # needed for SARIF upload
  actions: read

concurrency:
  group: sbom-refresh-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  ARTIFACT_RETENTION_DAYS: 14
  # Optional: set to GHCR image ref to also SBOM/scan the container, e.g. ghcr.io/owner/repo:latest
  OCI_IMAGE: ''

jobs:
  sbom:
    name: Generate SBOMs
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      has_python: ${{ steps.detect-py.outputs.has_python }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Python SBOM (CycloneDX) ----------
      - name: Set up Python
        id: setup-py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/setup.cfg
            **/setup.py

      - name: Detect Python deps (best-effort)
        id: detect-py
        shell: bash
        run: |
          shopt -s nullglob
          files=( **/requirements*.txt **/pyproject.toml **/setup.cfg **/setup.py )
          if (( ${#files[@]} > 0 )); then echo "has_python=true" >> "$GITHUB_OUTPUT"; else echo "has_python=false" >> "$GITHUB_OUTPUT"; fi

      - name: Install CycloneDX (Python)
        if: ${{ steps.detect-py.outputs.has_python == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom

      - name: Generate Python deps SBOM (CycloneDX)
        if: ${{ steps.detect-py.outputs.has_python == 'true' }}
        run: |
          cyclonedx-bom -o sbom-python.cdx.json || true
          [ -s sbom-python.cdx.json ] && echo "Python SBOM created." || echo "No Python SBOM (no deps detected)."

      # ---------- Repo SBOMs (CycloneDX + SPDX) ----------
      - name: Install Syft (SBOM generator)
        uses: anchore/sbom-action/download-syft@v0.17.0

      - name: Generate repo SBOM (CycloneDX JSON via Syft)
        run: |
          syft dir:. -o cyclonedx-json > sbom-repo.cdx.json
          test -s sbom-repo.cdx.json

      - name: Generate repo SBOM (SPDX JSON via Syft)
        run: |
          syft dir:. -o spdx-json > sbom-repo.spdx.json
          test -s sbom-repo.spdx.json

      # ---------- Optional: OCI image SBOM ----------
      - name: Generate image SBOM (if OCI_IMAGE is set)
        if: ${{ env.OCI_IMAGE != '' }}
        run: |
          syft "${{ env.OCI_IMAGE }}" -o cyclonedx-json > sbom-image.cdx.json || true
          [ -s sbom-image.cdx.json ] && echo "Image SBOM created." || echo "Image SBOM not generated."

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sboms
          path: |
            sbom-repo.cdx.json
            sbom-repo.spdx.json
            sbom-python.cdx.json
            sbom-image.cdx.json
          if-no-files-found: warn
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  scan:
    name: Vulnerability Scan (Grype → SARIF)
    needs: sbom
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Download SBOM artifacts
        uses: actions/download-artifact@v4
        with:
          name: sboms
          path: sboms

      - name: Install Grype (vulnerability scanner)
        uses: anchore/scan-action/download-grype@v3

      - name: Scan SBOMs with Grype (produce SARIF per SBOM)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p sarif
          shopt -s nullglob
          count=0
          for sb in sboms/*.json; do
            base=$(basename "$sb")
            out="sarif/${base%.json}.sarif"
            echo "Scanning $sb → $out"
            # Grype accepts SBOM inputs directly; keep going even if scan fails
            grype "sbom:$sb" -o sarif > "$out" || true
            count=$((count+1))
          done
          echo "Scanned $count SBOM(s)."
          ls -l sarif || true

      - name: Upload SARIF results to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif

      - name: Upload SARIF as artifact (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom-scan-sarif
          path: sarif/*.sarif
          retention-days: 7

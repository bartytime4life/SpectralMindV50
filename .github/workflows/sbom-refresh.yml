name: sbom-refresh

on:
  schedule:
    - cron: "0 6 * * 1"  # Mondays 06:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # for SARIF upload
  actions: read

concurrency:
  group: sbom-refresh-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  ARTIFACT_RETENTION_DAYS: 30
  ARTIFACTS_DIR: artifacts
  RUN_ID: ${{ github.run_id }}
  SHA_SHORT: ${{ github.sha }}

jobs:
  sbom:
    name: Generate SBOMs & Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: 📥 Checkout repository (full history for provenance)
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with: { fetch-depth: 0 }

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@0b93645e9fea7318efd9b4012f1f1a1f4f6c21fc # v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: 📦 Install SBOM/validation tooling
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install --upgrade cyclonedx-bom cyclonedx-cli
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: 🗂 Prepare artifacts dir
        run: mkdir -p "${ARTIFACTS_DIR}"

      - name: 🧪 Generate CycloneDX from Python manifests (if present)
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob
          ts="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

          # requirements*.txt (top-level + folder)
          for req in requirements.txt requirements-dev.txt requirements/*.txt **/requirements*.txt; do
            [ -f "$req" ] || continue
            base="${req%.*}"
            out_json="${ARTIFACTS_DIR}/python-$(echo "$base" | tr '/ ' '__').cdx.json"
            echo "Generating CycloneDX from $req -> $out_json"
            cyclonedx-bom -i "$req" -o "$out_json" -F json
          done

          # Project metadata
          if [[ -f pyproject.toml || -f setup.cfg || -f setup.py ]]; then
            echo "Generating CycloneDX for project metadata -> ${ARTIFACTS_DIR}/python-project.cdx.json"
            cyclonedx-bom -o "${ARTIFACTS_DIR}/python-project.cdx.json" -F json
          fi

          # Installed environment snapshot (non-fatal on slim envs)
          echo "Generating CycloneDX for installed env -> ${ARTIFACTS_DIR}/python-installed.cdx.json"
          cyclonedx-bom -o "${ARTIFACTS_DIR}/python-installed.cdx.json" -F json -e || true

          # Lightweight provenance note
          cat > "${ARTIFACTS_DIR}/provenance.json" <<EOF
          {
            "repository": "${{ github.repository }}",
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "run_id": "${{ github.run_id }}",
            "timestamp_utc": "${ts}"
          }
          EOF

      - name: 🧱 Generate repo SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@5c043a5065ad9009a4633986c724c8da7b34fd55 # v0
        with:
          path: .
          format: cyclonedx-json
          output-file: ${{ env.ARTIFACTS_DIR }}/repo.cdx.json

      - name: 🧾 Generate repo SBOM (SPDX JSON)
        uses: anchore/sbom-action@5c043a5065ad9009a4633986c724c8da7b34fd55 # v0
        with:
          path: .
          format: spdx-json
          output-file: ${{ env.ARTIFACTS_DIR }}/repo.spdx.json

      - name: 🔄 CycloneDX → SPDX tag:value (readable snapshot)
        run: |
          cyclonedx-cli convert \
            --input-format json \
            --output-format spdx-tag-value \
            --input-file "${ARTIFACTS_DIR}/repo.cdx.json" \
            --output-file "${ARTIFACTS_DIR}/repo.spdx.tag"

      - name: ✅ Validate CycloneDX documents
        shell: bash
        run: |
          set -Eeuo pipefail
          shopt -s nullglob
          for f in "${ARTIFACTS_DIR}"/*.cdx.json; do
            echo "Validating $f"
            cyclonedx-cli validate --input-file "$f"
          done

      - name: 🐳 Generate Docker context SBOM (CycloneDX) if Dockerfile exists
        if: hashFiles('Dockerfile') != ''
        uses: anchore/sbom-action@5c043a5065ad9009a4633986c724c8da7b34fd55 # v0
        with:
          path: .
          format: cyclonedx-json
          output-file: ${{ env.ARTIFACTS_DIR }}/docker-context.cdx.json

      - name: 🛡️ Vulnerability scan via Grype (SARIF)
        uses: anchore/scan-action@a3f8ca1cfbbcef9d4a2d7c0b34166466fc82ee62 # v5
        with:
          sbom: ${{ env.ARTIFACTS_DIR }}/repo.cdx.json
          fail-build: false
          severity-cutoff: low
          output-format: sarif
          output-file: ${{ env.ARTIFACTS_DIR }}/grype.sarif

      - name: ☁️ Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          sarif_file: ${{ env.ARTIFACTS_DIR }}/grype.sarif
          category: sbom-refresh

      - name: 📤 Upload SBOM artifacts
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: sboms-${{ env.RUN_ID }}-${{ env.SHA_SHORT }}
          path: ${{ env.ARTIFACTS_DIR }}/*
          if-no-files-found: warn
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          compression-level: 9

      - name: 🧾 Job summary
        if: always()
        run: |
          {
            echo "## SBOM Refresh Summary"
            echo
            echo "**Repository:** \`${{ github.repository }}\`"
            echo "**Ref:** \`${{ github.ref }}\`"
            echo "**Commit:** \`${{ github.sha }}\`"
            echo
            echo "### Files"
            ls -1 "${ARTIFACTS_DIR}" | sed 's/^/- /'
            echo
            echo "### Notes"
            echo "- CycloneDX documents validated with \`cyclonedx-cli validate\`"
            echo "- SARIF uploaded to **Code Scanning** (severity cutoff: low)"
            echo "- Artifacts retained for ${ARTIFACT_RETENTION_DAYS} days"
          } >> "$GITHUB_STEP_SUMMARY"

name: sbom

on:
  push:
    branches: [main, develop]
    paths:
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/sbom.yml'
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * 1'  # weekly refresh

permissions:
  contents: read
  id-token: write        # for keyless cosign signing of SBOMs (kept as artifacts)
  packages: read         # needed if OCI_IMAGE points to GHCR

concurrency:
  group: sbom-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  ARTIFACT_RETENTION_DAYS: 14
  # Optional: set to an OCI image (e.g. ghcr.io/owner/repo:latest) to SBOM the container too
  OCI_IMAGE: ''

jobs:
  cyclonedx:
    name: Generate & sign SBOMs (CycloneDX/SPDX)
    runs-on: ubuntu-latest
    timeout-minutes: 18

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # ---------- Python deps SBOM (CycloneDX) ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            **/requirements*.txt
            **/pyproject.toml
            **/poetry.lock
            **/setup.cfg
            **/setup.py

      - name: Detect Python dependency manifests
        id: detect
        shell: bash
        run: |
          shopt -s nullglob
          files=( **/requirements*.txt **/pyproject.toml **/poetry.lock **/setup.cfg **/setup.py )
          if (( ${#files[@]} > 0 )); then
            echo "has_python=true" >> "$GITHUB_OUTPUT"
            printf 'Found manifests:\n%s\n' "${files[@]}"
          else
            echo "has_python=false" >> "$GITHUB_OUTPUT"
            echo "No Python manifests found."
          fi

      - name: Install CycloneDX tool
        if: ${{ steps.detect.outputs.has_python == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom pipdeptree

      - name: Generate Python SBOM (CycloneDX JSON)
        if: ${{ steps.detect.outputs.has_python == 'true' }}
        run: |
          mkdir -p reports
          cyclonedx-bom -r -o reports/sbom-python.cdx.json || true
          [ -s reports/sbom-python.cdx.json ] && echo "Python SBOM created." || echo "No Python SBOM (no deps detected)."
          # Optional: dependency tree snapshot for auditors
          pipdeptree --freeze > reports/pipdeptree.txt || true

      # ---------- Repo SBOMs (CycloneDX + SPDX) via Syft ----------
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.20.5

      - name: Repo SBOM (CycloneDX JSON)
        run: |
          mkdir -p reports
          syft dir:. -o cyclonedx-json > reports/sbom-repo.cdx.json
          test -s reports/sbom-repo.cdx.json

      - name: Repo SBOM (SPDX JSON)
        run: |
          syft dir:. -o spdx-json > reports/sbom-repo.spdx.json
          test -s reports/sbom-repo.spdx.json

      # ---------- Optional: Container Image SBOM (CycloneDX) ----------
      - name: Image SBOM (CycloneDX) if OCI_IMAGE is set
        if: ${{ env.OCI_IMAGE != '' }}
        run: |
          syft "${{ env.OCI_IMAGE }}" -o cyclonedx-json > reports/sbom-image.cdx.json || true
          [ -s reports/sbom-image.cdx.json ] && echo "Image SBOM created." || echo "Image SBOM not generated."

      # ---------- Validate & summarize ----------
      - name: Validate JSON structure (jq)
        run: |
          set -euo pipefail
          ok=0
          for f in reports/*.json; do
            [ -f "$f" ] || continue
            jq empty "$f" && echo "✅ JSON valid: $f" && ok=1 || echo "❌ Invalid JSON: $f"
          done
          [ "$ok" = "1" ] || echo "No JSON SBOMs to validate (ok if no deps)."

      - name: Summarize components & licenses
        if: always()
        run: |
          echo "### SBOM summary" >> $GITHUB_STEP_SUMMARY
          summarize() {
            f="$1"
            [ -f "$f" ] || return 0
            # CycloneDX: components[*].name and licenses[*].license.id/name
            comps=$(jq -r '[.components[]?.name] | length' "$f" 2>/dev/null || echo 0)
            lic=$(jq -r '
              [.components[]?.licenses[]?
                | (.license.id // .license.name // .expression // "UNKNOWN")] | unique | sort | .[]' "$f" 2>/dev/null || true)
            echo "- $(basename "$f"): components=$comps" >> $GITHUB_STEP_SUMMARY
            [ -n "$lic" ] && printf '  - licenses:\n%s\n' "$(echo "$lic" | sed 's/^/    • /')" >> $GITHUB_STEP_SUMMARY
          }
          summarize reports/sbom-python.cdx.json
          summarize reports/sbom-repo.cdx.json
          summarize reports/sbom-image.cdx.json

      # ---------- Sign SBOM artifacts (keyless via OIDC) ----------
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Sign SBOM JSONs (produce .sig + .cert)
        env: { COSIGN_EXPERIMENTAL: "true" }
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in reports/*.json; do
            cosign sign-blob --yes "$f" \
              --output-signature "$f.sig" \
              --output-certificate "$f.cert"
          done

      - name: Upload SBOM bundle
        uses: actions/upload-artifact@v4
        with:
          name: sbom-bundle
          path: |
            reports/sbom-python.cdx.json
            reports/sbom-repo.cdx.json
            reports/sbom-repo.spdx.json
            reports/sbom-image.cdx.json
            reports/*.sig
            reports/*.cert
            reports/pipdeptree.txt
          if-no-files-found: warn
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
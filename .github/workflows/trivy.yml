name: trivy-scan

on:
  pull_request:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 6 * * 2"   # Tuesdays 06:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  packages: read

concurrency:
  group: trivy-scan-${{ github.ref }}
  cancel-in-progress: true

env:
  # Optional failure gate: none | low | medium | high | critical
  TRIVY_FAIL_ON: "none"
  # NOTE: We keep Trivy action on a tag here. If you want a SHA pin, say the word and I'll lock it.
  TRIVY_ACTION_VERSION: "0.33.1"

jobs:
  fs-and-config:
    name: Trivy FS/Config scan
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with: { fetch-depth: 0 }

      - name: ♻️ Cache Trivy DB
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('**/requirements*.txt', '**/package*.json', 'Dockerfile', '**/*.tf', '**/*.y*ml') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-${{ github.ref_name }}-
            trivy-db-${{ runner.os }}-

      - name: 🔎 Load .trivyignore / policy (if present)
        id: ign
        shell: bash
        run: |
          if [ -f .trivyignore ]; then echo "ignore=.trivyignore" >> "$GITHUB_OUTPUT"; else echo "ignore=" >> "$GITHUB_OUTPUT"; fi
          if [ -d .github/trivy-policies ]; then echo "policy=.github/trivy-policies" >> "$GITHUB_OUTPUT"; else echo "policy=" >> "$GITHUB_OUTPUT"; fi

      - name: 🧪 Trivy FS → SARIF (vuln/secret/misconfig/license)
        id: trivy-fs
        uses: aquasecurity/trivy-action@${{ env.TRIVY_ACTION_VERSION }}
        with:
          scan-type: fs
          ignore-unfixed: true
          scanners: vuln,secret,misconfig,license
          vuln-type: os,library
          format: sarif
          output: trivy-fs.sarif
          severity: CRITICAL,HIGH,MEDIUM,LOW
          timeout: 10m
          trivyignores: ${{ steps.ign.outputs.ignore }}
          policy: ${{ steps.ign.outputs.policy }}
        continue-on-error: true  # report-only

      - name: 🧪 Trivy Config → SARIF
        id: trivy-config
        uses: aquasecurity/trivy-action@${{ env.TRIVY_ACTION_VERSION }}
        with:
          scan-type: config
          format: sarif
          output: trivy-config.sarif
          severity: CRITICAL,HIGH,MEDIUM,LOW
          timeout: 10m
          trivyignores: ${{ steps.ign.outputs.ignore }}
          policy: ${{ steps.ign.outputs.policy }}
        continue-on-error: true

      - name: ✅ Ensure SARIFs exist
        run: |
          [ -s trivy-fs.sarif ] || echo '{"runs":[]}' > trivy-fs.sarif
          [ -s trivy-config.sarif ] || echo '{"runs":[]}' > trivy-config.sarif

      - name: ⬆️ Upload FS SARIF (fork-safe)
        if: ${{ (github.event_name != 'pull_request') || (github.event.pull_request.head.repo.fork != true) }}
        uses: github/codeql-action/upload-sarif@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs

      - name: ⬆️ Upload Config SARIF (fork-safe)
        if: ${{ (github.event_name != 'pull_request') || (github.event.pull_request.head.repo.fork != true) }}
        uses: github/codeql-action/upload-sarif@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          sarif_file: trivy-config.sarif
          category: trivy-config

      - name: 📝 Summarize results
        if: always()
        shell: bash
        run: |
          summarize () {
            local f="$1"
            jq -r '
              [ .runs[].results[]? |
                ( .level // .properties.severity // .rule.properties."security-severity" // "" ) ] |
              map( ascii_downcase
                   | if test("^[0-9.]+$") then
                       (if (tonumber>=9) then "critical"
                        elif (tonumber>=7) then "high"
                        elif (tonumber>=4) then "medium"
                        elif (tonumber>0) then "low" else "none" end)
                     else . end) as $sev |
              [ ($sev|map(select(.=="critical"))|length),
                ($sev|map(select(.=="high"))|length),
                ($sev|map(select(.=="medium"))|length),
                ($sev|map(select(.=="low" or .=="warning"))|length) ] | @tsv' "$f" 2>/dev/null
          }
          {
            echo "### Trivy summary"
            printf '| Report | Critical | High | Medium | Low |\n|---|---:|---:|---:|---:|\n'
            for f in trivy-fs.sarif trivy-config.sarif; do
              read -r c h m l < <(summarize "$f")
              printf '| %s | %s | %s | %s | %s |\n' "$(basename "$f")" "${c:-0}" "${h:-0}" "${m:-0}" "${l:-0}"
            done
          } >> "$GITHUB_STEP_SUMMARY"

      - name: 📦 Upload FS/Config reports (artifact)
        if: always()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: trivy-fs-config-reports
          path: |
            trivy-fs.sarif
            trivy-config.sarif
          retention-days: 14

      - name: 🚦 Optional failure gate (auto-high on main pushes)
        if: always()
        shell: bash
        run: |
          lvl="${TRIVY_FAIL_ON,,}"
          if [[ "$lvl" == "none" && "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF}" == "refs/heads/main" ]]; then
            lvl="high"
            echo "Auto-escalating TRIVY_FAIL_ON to 'high' for push to main"
          fi
          [[ -z "$lvl" || "$lvl" == "none" ]] && { echo "Gate disabled (TRIVY_FAIL_ON=$lvl)"; exit 0; }
          declare -A rank=( [low]=1 [medium]=2 [high]=3 [critical]=4 )
          thr=${rank[$lvl]:-0}
          total=0
          for s in trivy-fs.sarif trivy-config.sarif; do
            hits=$(jq -r '
              [ .runs[].results[]? |
                ( .level // .properties.severity // .rule.properties."security-severity" // "" ) ]' "$s" \
            | awk -v thr="$thr" '
                function norm(x){ x=tolower(x);
                  if(x=="critical")return 4; if(x=="high")return 3; if(x=="medium")return 2;
                  if(x=="low"||x=="warning")return 1;
                  if (x ~ /^[0-9.]+$/){n=x+0; if(n>=9)return 4; if(n>=7)return 3; if(n>=4)return 2; if(n>0)return 1;}
                  return 0 }
                { if (norm($0) >= thr) c++ } END { print c+0 }')
            total=$(( total + hits ))
          done
          if (( total > 0 )); then
            echo "::error::Trivy found $total issue(s) at >= $lvl severity"
            exit 1
          fi
          echo "No issues at >= $lvl severity."

  image-build:
    name: Trivy Image scan (local build if Dockerfile present)
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4

      - name: 🔎 Detect Dockerfile
        id: detect
        run: |
          if [ -f Dockerfile ]; then echo "found=true" >> "$GITHUB_OUTPUT"; else echo "found=false" >> "$GITHUB_OUTPUT"; fi

      - name: 🧰 Set up QEMU
        if: steps.detect.outputs.found == 'true'
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3

      - name: 🧱 Set up Docker Buildx
        if: steps.detect.outputs.found == 'true'
        uses: docker/setup-buildx-action@2b51285047da1547ffb1b2203d8be4c0af6b1f20 # v3

      - name: 🏗️ Build image (local, no push)
        if: steps.detect.outputs.found == 'true'
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6
        with:
          context: .
          tags: localbuild:trivy-${{ github.sha }}
          load: true

      - name: ♻️ Cache Trivy DB (image)
        if: steps.detect.outputs.found == 'true'
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-image-${{ github.ref_name }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-image-${{ github.ref_name }}-
            trivy-db-${{ runner.os }}-image-

      - name: 🧪 Trivy Image → SARIF
        if: steps.detect.outputs.found == 'true'
        id: trivy-image
        uses: aquasecurity/trivy-action@${{ env.TRIVY_ACTION_VERSION }}
        with:
          scan-type: image
          image-ref: localbuild:trivy-${{ github.sha }}
          ignore-unfixed: true
          scanners: vuln,secret,misconfig,license
          vuln-type: os,library
          format: sarif
          output: trivy-image.sarif
          severity: CRITICAL,HIGH,MEDIUM,LOW
          timeout: 10m
        continue-on-error: true

      - name: ✅ Ensure image SARIF
        if: steps.detect.outputs.found == 'true'
        run: |
          [ -s trivy-image.sarif ] || echo '{"runs":[]}' > trivy-image.sarif

      - name: ⬆️ Upload Image SARIF (fork-safe)
        if: steps.detect.outputs.found == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true)
        uses: github/codeql-action/upload-sarif@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image

      - name: 📝 Summarize image results
        if: always() && steps.detect.outputs.found == 'true'
        shell: bash
        run: |
          echo "### Trivy image summary" >> $GITHUB_STEP_SUMMARY
          read -r c h m l < <(jq -r '
            [ .runs[].results[]? |
              ( .level // .properties.severity // .rule.properties."security-severity" // "" ) ] |
            map( ascii_downcase
                 | if test("^[0-9.]+$") then
                     (if (tonumber>=9) then "critical"
                      elif (tonumber>=7) then "high"
                      elif (tonumber>=4) then "medium"
                      elif (tonumber>0) then "low" else "none" end)
                   else . end) as $sev |
            [ ($sev|map(select(.=="critical"))|length),
              ($sev|map(select(.=="high"))|length),
              ($sev|map(select(.=="medium"))|length),
              ($sev|map(select(.=="low" or .=="warning"))|length) ] | @tsv' trivy-image.sarif 2>/dev/null)
          printf '| Critical | High | Medium | Low |\n|---:|---:|---:|---:|\n| %s | %s | %s | %s |\n' "${c:-0}" "${h:-0}" "${m:-0}" "${l:-0}" >> $GITHUB_STEP_SUMMARY

      - name: 📦 Upload Trivy image report
        if: always() && steps.detect.outputs.found == 'true'
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: trivy-image-report
          path: trivy-image.sarif
          retention-days: 14

  registry-image:
    name: Scan GHCR registry image (latest) if present
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: 🔐 Docker login (GHCR)
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Try to pull image
        id: pull
        shell: bash
        env:
          IMAGE: ghcr.io/${{ github.repository }}:latest
        run: |
          if docker pull "$IMAGE" >/dev/null 2>&1; then
            echo "image=$IMAGE" >> "$GITHUB_OUTPUT"
          else
            echo "image=" >> "$GITHUB_OUTPUT"
            echo "No GHCR :latest image available; skipping."
          fi

      - name: ♻️ Cache Trivy DB (registry)
        if: steps.pull.outputs.image != ''
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-registry-latest
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: 🧪 Trivy GHCR image → SARIF
        if: steps.pull.outputs.image != ''
        uses: aquasecurity/trivy-action@${{ env.TRIVY_ACTION_VERSION }}
        with:
          scan-type: image
          image-ref: ${{ steps.pull.outputs.image }}
          ignore-unfixed: true
          scanners: vuln,secret,misconfig,license
          vuln-type: os,library
          format: sarif
          output: trivy-ghcr-latest.sarif
          severity: CRITICAL,HIGH,MEDIUM,LOW
          timeout: 10m
        continue-on-error: true

      - name: ⬆️ Upload GHCR SARIF (fork-safe)
        if: steps.pull.outputs.image != '' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true)
        uses: github/codeql-action/upload-sarif@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          sarif_file: trivy-ghcr-latest.sarif
          category: trivy-ghcr-latest

      - name: 📦 Upload GHCR report (artifact)
        if: always() && steps.pull.outputs.image != ''
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: trivy-ghcr-latest-report
          path: trivy-ghcr-latest.sarif
          retention-days: 14
name: docker-build

on:
  push:
    branches: [ main ]
    paths:
      - "Dockerfile"
      - "docker/**"
      - "src/**"
      - "pyproject.toml"
      - "requirements*.txt"
  pull_request:
    paths:
      - "Dockerfile"
      - "docker/**"
      - "src/**"
      - "pyproject.toml"
      - "requirements*.txt"
  workflow_dispatch:

# Least-privilege by default; only this workflow needs these
permissions:
  contents: read
  packages: write          # push to GHCR (non-PR)
  security-events: write   # upload Trivy SARIF
  attestations: write      # build provenance
  id-token: write          # OIDC for provenance

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}           # normalized by metadata-action
  PLATFORMS: linux/amd64                         # set "linux/amd64,linux/arm64" for multi-arch
  ARTIFACT_RETENTION_DAYS: 14
  # Trivy DB cache salt (bump to force refresh)
  TRIVY_KEY_SALT: v1
  # Optional failure gate for Trivy: none | low | medium | high | critical
  TRIVY_FAIL_ON: none

jobs:
  build:
    name: Build image, scan, SBOM, attest
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive version
        id: ver
        run: |
          set -euo pipefail
          v="$(git describe --tags --always --dirty=-wip || echo "${GITHUB_SHA::7}")"
          echo "version=${v}" >> "$GITHUB_OUTPUT"

      - name: Dockerfile lint (Hadolint)
        if: hashFiles('Dockerfile') != ''
        uses: hadolint/hadolint-action@v3.2.0
        with:
          dockerfile: Dockerfile

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=sha-,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=raw,event=push,enable={{is_default_branch}},value=latest
          labels: |
            org.opencontainers.image.title=SpectraMind V50
            org.opencontainers.image.description=NeurIPS 2025 Ariel Data Challenge runtime
            org.opencontainers.image.vendor=SpectraMind
            org.opencontainers.image.version=${{ steps.ver.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.licenses=Apache-2.0

      - name: Set up QEMU (for multi-arch)
        if: contains(env.PLATFORMS, ',')
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # PRs → build locally (no push) so Trivy can scan the image
      - name: Build (PR) — load to local Docker
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64          # local load supports single-arch only
          load: true
          push: false
          pull: true
          tags: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.ver.outputs.version }}
            GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # main branch / manual → push to GHCR
      - name: Build & Push (main)
        id: build-push
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          pull: true
          provenance: false                 # we attest separately
          sbom: false                       # SBOM generated by Syft step
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.ver.outputs.version }}
            GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ---------- SBOMs ----------
      - name: Repo SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@v0.20.5
        with:
          path: .
          output-file: sbom-repo.cdx.json
          format: cyclonedx-json

      - name: Image SBOM (Syft → CycloneDX)
        if: github.event_name != 'pull_request'
        uses: anchore/syft-action@v0.20.5
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-push.outputs.digest }}
          output: cyclonedx-json=sbom-image.cdx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-bundle
          path: |
            sbom-repo.cdx.json
            sbom-image.cdx.json
          if-no-files-found: warn
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      # ---------- Vulnerability scan (Trivy) ----------
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ env.TRIVY_KEY_SALT }}-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('Dockerfile', '**/requirements*.txt') }}
          restore-keys: |
            trivy-db-${{ env.TRIVY_KEY_SALT }}-${{ runner.os }}-${{ github.ref_name }}-
            trivy-db-${{ env.TRIVY_KEY_SALT }}-${{ runner.os }}-

      - name: Trivy image scan (PR local)
        if: github.event_name == 'pull_request'
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          ignore-unfixed: true
          vuln-type: os,library
          format: sarif
          output: trivy.sarif
        continue-on-error: true

      - name: Trivy image scan (pushed)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: ${{ steps.meta.outputs.tags }}
          ignore-unfixed: true
          vuln-type: os,library
          format: sarif
          output: trivy.sarif
        continue-on-error: true

      - name: Ensure SARIF exists
        run: |
          [ -s trivy.sarif ] || echo '{"runs":[]}' > trivy.sarif

      - name: Upload Trivy SARIF (fork-safe)
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
          category: trivy-docker

      - name: Upload Trivy report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy.sarif
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Optional Trivy failure gate
        if: always()
        shell: bash
        run: |
          lvl="${TRIVY_FAIL_ON,,}"
          [[ -z "$lvl" || "$lvl" == "none" ]] && { echo "Gate disabled (TRIVY_FAIL_ON=$lvl)"; exit 0; }
          declare -A rank=( [low]=1 [medium]=2 [high]=3 [critical]=4 )
          thr=${rank[$lvl]:-0}
          hits=$(jq -r '
            [ .runs[].results[]? |
              ( .level // .properties.severity // .rule.properties."security-severity" // "" ) ]' trivy.sarif 2>/dev/null \
          | awk -v thr="$thr" '
              function norm(x){ x=tolower(x);
                if(x=="critical")return 4; if(x=="high")return 3; if(x=="medium")return 2;
                if(x=="low"||x=="warning")return 1; if (x ~ /^[0-9.]+$/){n=x+0; if(n>=9)return 4; if(n>=7)return 3; if(n>=4)return 2; if(n>0)return 1;} return 0 }
              { if (norm($0) >= thr) c++ } END { print c+0 }')
          if (( hits > 0 )); then
            echo "::error::Trivy found $hits issues at >= $lvl severity"
            exit 1
          fi
          echo "No issues at >= $lvl severity."

      # ---------- Build provenance attestation (GHCR) ----------
      - name: Attest build provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true

      - name: Summary
        if: always()
        run: |
          echo "### Docker build summary" >> $GITHUB_STEP_SUMMARY
          echo "- Version: \`${{ steps.ver.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Tags: \`${{ steps.meta.outputs.tags || fromJSON(steps.meta.outputs.json).tags[0] }}\`" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.build-push.outputs.digest }}" ]; then
            echo "- Digest: \`${{ steps.build-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          test -f sbom-repo.cdx.json && echo "- Repo SBOM: ✅" >> $GITHUB_STEP_SUMMARY || true
          test -f sbom-image.cdx.json && echo "- Image SBOM: ✅" >> $GITHUB_STEP_SUMMARY || echo "- Image SBOM: (PR only ⇒ skipped)" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy SARIF uploaded: ✅" >> $GITHUB_STEP_SUMMARY
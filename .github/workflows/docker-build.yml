name: docker-build

on:
  push:
    branches: [ main ]
    paths:
      - "Dockerfile"
      - "docker/**"
      - "src/**"
      - "pyproject.toml"
      - "requirements*.txt"
  pull_request:
    paths:
      - "Dockerfile"
      - "docker/**"
      - "src/**"
      - "pyproject.toml"
      - "requirements*.txt"
  workflow_dispatch:

# Least-privilege for all jobs (escalate only where needed)
permissions:
  contents: read
  packages: write          # push to GHCR (non-PR)
  security-events: write   # upload Trivy SARIF
  attestations: write      # build provenance
  id-token: write          # OIDC for provenance

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}     # normalized by docker/metadata-action
  # Set to "linux/amd64,linux/arm64" for multi-arch; single-arch is faster for CI
  PLATFORMS: linux/amd64
  # Trivy DB cache salt (bump to force refresh)
  TRIVY_KEY_SALT: v1

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive version
        id: ver
        run: |
          set -euo pipefail
          v="$(git describe --tags --always --dirty=-wip || true)"
          echo "version=${v}" >> "$GITHUB_OUTPUT"

      - name: Docker metadata (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=sha-,format=long
            type=ref,event=branch
            type=ref,event=pr
            type=raw,event=push,enable={{is_default_branch}},value=latest
          labels: |
            org.opencontainers.image.title=SpectraMind V50
            org.opencontainers.image.description=NeurIPS 2025 Ariel Data Challenge runtime
            org.opencontainers.image.vendor=SpectraMind
            org.opencontainers.image.version=${{ steps.ver.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}

      - name: Set up QEMU (multi-arch)
        if: contains(env.PLATFORMS, ',')
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # PRs: build locally (no push) so Trivy can scan the local image
      - name: Build (PR) â€” load to local Docker
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          # local load supports single-arch only
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.ver.outputs.version }}
            GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # main branch: push to GHCR
      - name: Build & Push (main)
        id: build-push
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: true
          # we attest provenance separately
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.ver.outputs.version }}
            GIT_SHA=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- SBOM (CycloneDX) for repo (fast, useful during CI) ---
      - name: Generate repo SBOM (CycloneDX JSON)
        uses: anchore/sbom-action@v0.20.5
        with:
          path: .
          output-file: sbom.cdx.json
          format: cyclonedx-json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.cdx.json
          if-no-files-found: error
          retention-days: 14

      # --- Vulnerability scan (Trivy) ---
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ env.TRIVY_KEY_SALT }}-${{ runner.os }}-${{ github.ref_name }}-${{ hashFiles('Dockerfile', '**/requirements*.txt') }}
          restore-keys: |
            trivy-db-${{ env.TRIVY_KEY_SALT }}-${{ runner.os }}-${{ github.ref_name }}-
            trivy-db-${{ env.TRIVY_KEY_SALT }}-${{ runner.os }}-

      # PRs: scan the local tag
      - name: Trivy image scan (PR)
        if: github.event_name == 'pull_request'
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          ignore-unfixed: true
          vuln-type: "os,library"
          format: sarif
          output: trivy.sarif
        continue-on-error: true

      # main: scan pushed tags (from metadata)
      - name: Trivy image scan (main)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: ${{ steps.meta.outputs.tags }}
          ignore-unfixed: true
          vuln-type: "os,library"
          format: sarif
          output: trivy.sarif
        continue-on-error: true

      - name: Ensure SARIF exists
        run: |
          [ -s trivy.sarif ] || echo '{"runs":[]}' > trivy.sarif

      - name: Upload Trivy SARIF (fork-safe)
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif
          category: trivy-docker

      - name: Upload Trivy report (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy.sarif
          retention-days: 14

      # --- Build provenance attestation (GHCR) ---
      - name: Attest build provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-push.outputs.digest }}
          push-to-registry: true
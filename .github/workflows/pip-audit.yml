name: pip-audit

on:
  pull_request:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 7 * * 2"  # Tuesdays 07:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # SARIF upload

concurrency:
  group: pip-audit-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  # Set to "none" (default) to never fail CI; else one of: critical | high | medium | low
  AUDIT_FAIL_ON: "none"
  # Pin pip-audit for reproducibility (update periodically)
  PIP_AUDIT_VERSION: "2.7.3"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONUTF8: "1"

jobs:
  audit:
    name: Python deps vulnerability audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install "pip-audit==${PIP_AUDIT_VERSION}" jq

      - name: Discover requirement files
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t REQS < <(git ls-files \
            ':!:**/.venv/**' ':!:**/site-packages/**' \
            '**/requirements*.txt' 'requirements.txt' \
            'requirements-dev.txt' 'requirements-kaggle.txt' 2>/dev/null | sort -u || true)
          if [ "${#REQS[@]}" -gt 0 ]; then
            printf 'reqs=%s\n' "$(printf '%s ' "${REQS[@]}")" >> "$GITHUB_OUTPUT"
          else
            echo "No requirements*.txt files found."
          fi

      - name: Load ignore list (if present)
        id: ignore
        shell: bash
        run: |
          set -euo pipefail
          IGN_FILE=".github/pip-audit.ignore"
          if [ -f "$IGN_FILE" ]; then
            # Build repeated --ignore-vuln flags from lines (strip comments/empties)
            flags=$(sed -E 's/#.*$//' "$IGN_FILE" | sed '/^\s*$/d' | sed 's/^/--ignore-vuln /' | xargs -r echo)
            echo "flags=$flags" >> "$GITHUB_OUTPUT"
            echo "Using ignore list: $IGN_FILE"
          else
            echo "flags=" >> "$GITHUB_OUTPUT"
          fi

      - name: Audit requirement files â†’ SARIF
        if: steps.discover.outputs.reqs != ''
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .audit
          IFS=' ' read -r -a REQS <<< "${{ steps.discover.outputs.reqs }}"
          for f in "${REQS[@]}"; do
            out=".audit/$(echo "$f" | tr '/.' '__').sarif"
            echo "::group::pip-audit -r $f"
            pip-audit -r "$f" --format sarif --output "$out" ${{ steps.ignore.outputs.flags }} || true
            echo "::endgroup::"
          done

      - name: Project-mode audit (pyproject/setup)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .audit
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            echo "::group::pip-audit (project)"
            pip-audit --format sarif --output .audit/project.sarif ${{ steps.ignore.outputs.flags }} || true
            echo "::endgroup::"
          fi

      - name: Ensure at least one SARIF exists
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=(.audit/*.sarif)
          if [ ${#files[@]} -eq 0 ]; then
            echo '{}' > .audit/empty.sarif
          fi

      - name: Build summary table
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "### pip-audit summary" >> $GITHUB_STEP_SUMMARY
          printf '| Report | Critical | High | Medium | Low |\n|---|---:|---:|---:|---:|\n' >> $GITHUB_STEP_SUMMARY
          shopt -s nullglob
          for s in .audit/*.sarif; do
            # Extract severities, normalize, and count
            read -r crit high med low < <(jq -r '
              [ .runs[].results[]? | (
                  .properties.severity // .level // .rule.properties.security-severity // "" ) ] |
              map( if test("^[0-9.]+$") then
                      (if (tonumber>=9) then "critical"
                       elif (tonumber>=7) then "high"
                       elif (tonumber>=4) then "medium"
                       elif (tonumber>0) then "low" else "none" end)
                   else ascii_downcase end ) |
              [ (map(select(.=="critical"))|length),
                (map(select(.=="high"))|length),
                (map(select(.=="medium"))|length),
                (map(select(.=="low" or .=="warning"))|length) ] | @tsv
            ' "$s")
            printf '| %s | %s | %s | %s | %s |\n' "$(basename "$s")" "${crit:-0}" "${high:-0}" "${med:-0}" "${low:-0}" >> $GITHUB_STEP_SUMMARY
          done

      - name: Upload SARIF to Code Scanning (fork-safe)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .audit
          category: pip-audit

      - name: Upload raw reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-reports
          path: .audit/*.sarif
          if-no-files-found: ignore
          retention-days: 7

      - name: Optional failure gate by severity
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          lvl="${AUDIT_FAIL_ON,,}"
          [[ "$lvl" == "none" || -z "$lvl" ]] && { echo "Gate disabled (AUDIT_FAIL_ON=$lvl)."; exit 0; }
          declare -A rank=( [low]=1 [medium]=2 [high]=3 [critical]=4 )
          thr=${rank[$lvl]:-0}
          total=0
          shopt -s nullglob
          for s in .audit/*.sarif; do
            hits=$(jq -r '
              [ .runs[].results[]? | (
                .properties.severity // .level // .rule.properties.security-severity // "" ) ] |
              map( if test("^[0-9.]+$") then
                      (if (tonumber>=9) then "critical"
                       elif (tonumber>=7) then "high"
                       elif (tonumber>=4) then "medium"
                       elif (tonumber>0) then "low" else "none" end)
                   else ascii_downcase end )' "$s" \
            | awk -v lvl="$lvl" '
              function r(x){ if(x=="critical")return 4; if(x=="high")return 3; if(x=="medium")return 2; if(x=="low"||x=="warning")return 1; return 0 }
              { if (r($0) >= (lvl=="critical"?4:lvl=="high"?3:lvl=="medium"?2:lvl=="low"?1:5)) c++ } END { print c+0 }')
            total=$(( total + hits ))
          done
          if (( total > 0 )); then
            echo "::error::pip-audit found $total issues at >= ${lvl} severity"
            exit 1
          else
            echo "No issues at >= ${lvl} severity."
          fi
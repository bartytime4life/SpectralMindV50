name: pip-audit

on:
  pull_request:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 7 * * 2"  # Tuesdays 07:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # SARIF upload

concurrency:
  group: pip-audit-${{ github.ref }}
  cancel-in-progress: true

env:
  # Gate: "none" (default) never fails CI; else one of: critical | high | medium | low
  AUDIT_FAIL_ON: "none"
  # Reproducibility: pin pip-audit (periodically bump)
  PIP_AUDIT_VERSION: "2.7.3"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHONUTF8: "1"

jobs:
  audit:
    name: pip-audit (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]

    steps:
      - name: üì• Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0b93645e9fea7318efd9b4012f1f1a1f4f6c21fc # v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            setup.cfg
            setup.py

      - name: üîß Install tools
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          python -m pip install "pip-audit==${PIP_AUDIT_VERSION}"
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: üîé Discover requirement files
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t REQS < <(git ls-files \
            ':!:**/.venv/**' ':!:**/venv/**' ':!:**/env/**' ':!:**/site-packages/**' \
            'requirements.txt' '**/requirements*.txt' 'requirements-dev.txt' 'requirements-kaggle.txt' \
            2>/dev/null | sort -u || true)
          if [ "${#REQS[@]}" -gt 0 ]; then
            printf 'reqs=%s\n' "$(printf '%s ' "${REQS[@]}")" >> "$GITHUB_OUTPUT"
          else
            echo "reqs=" >> "$GITHUB_OUTPUT"
            echo "No requirements*.txt files found."
          fi

      - name: üßæ Load ignore list (if present)
        id: ignore
        shell: bash
        run: |
          set -euo pipefail
          IGN_FILE=".github/pip-audit.ignore"
          if [ -f "$IGN_FILE" ]; then
            flags=$(sed -E 's/#.*$//' "$IGN_FILE" | sed '/^\s*$/d' | sed 's/^/--ignore-vuln /' | xargs -r echo)
            echo "flags=$flags" >> "$GITHUB_OUTPUT"
            echo "Using ignore list: $IGN_FILE"
          else
            echo "flags=" >> "$GITHUB_OUTPUT"
          fi

      - name: üìÑ Audit requirement files ‚Üí SARIF
        if: steps.discover.outputs.reqs != ''
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .audit
          IFS=' ' read -r -a REQS <<< "${{ steps.discover.outputs.reqs }}"
          for f in "${REQS[@]}"; do
            out=".audit/$(echo "${{ matrix.python-version }}_$f" | tr '/.' '__').sarif"
            echo "::group::pip-audit -r $f (py${{ matrix.python-version }})"
            pip-audit -r "$f" --format sarif --output "$out" \
              ${{ steps.ignore.outputs.flags }} || true
            echo "::endgroup::"
          done

      - name: üß© Project-mode audit (pyproject/setup)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .audit
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            echo "::group::pip-audit (project) (py${{ matrix.python-version }})"
            pip-audit --format sarif --output ".audit/project_${{ matrix.python-version }}.sarif" \
              ${{ steps.ignore.outputs.flags }} || true
            echo "::endgroup::"
          fi

      - name: üßø Ensure at least one SARIF exists
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=(.audit/*${{ matrix.python-version }}*.sarif)
          if [ ${#files[@]} -eq 0 ]; then
            echo '{}' > ".audit/empty_${{ matrix.python-version }}.sarif"
          fi

      - name: üìä Build summary table
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "### pip-audit summary (py${{ matrix.python-version }})" >> $GITHUB_STEP_SUMMARY
          printf '| Report | Critical | High | Medium | Low |\n|---|---:|---:|---:|---:|\n' >> $GITHUB_STEP_SUMMARY
          shopt -s nullglob
          for s in .audit/*${{ matrix.python-version }}*.sarif; do
            read -r crit high med low < <(jq -r '
              [ .runs[].results[]? |
                ( .properties.severity // .level // .rule.properties.security-severity // "" ) ] |
              map( if test("^[0-9.]+$") then
                      (if (tonumber>=9) then "critical"
                       elif (tonumber>=7) then "high"
                       elif (tonumber>=4) then "medium"
                       elif (tonumber>0) then "low" else "none" end)
                   else ascii_downcase end ) |
              [ (map(select(.=="critical"))|length),
                (map(select(.=="high"))|length),
                (map(select(.=="medium"))|length),
                (map(select(.=="low" or .=="warning"))|length) ] | @tsv
            ' "$s")
            printf '| %s | %s | %s | %s | %s |\n' "$(basename "$s")" "${crit:-0}" "${high:-0}" "${med:-0}" "${low:-0}" >> $GITHUB_STEP_SUMMARY
          done

      - name: ‚¨ÜÔ∏è Upload SARIF to Code Scanning (fork-safe)
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork != true)
        uses: github/codeql-action/upload-sarif@2e96272c09e5f38e4f0e2e2e7c0cf9c3fb9d0d82 # v3
        with:
          sarif_file: .audit
          category: pip-audit-py${{ matrix.python-version }}

      - name: üì¶ Upload raw reports (artifact)
        if: always()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: pip-audit-reports-py${{ matrix.python-version }}
          path: .audit/*${{ matrix.python-version }}*.sarif
          if-no-files-found: ignore
          retention-days: 7

      - name: üö¶ Optional failure gate by severity
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          lvl="${AUDIT_FAIL_ON,,}"
          [[ "$lvl" == "none" || -z "$lvl" ]] && { echo "Gate disabled (AUDIT_FAIL_ON=$lvl)."; exit 0; }
          rank() { case "$1" in critical) echo 4;; high) echo 3;; medium) echo 2;; low|warning) echo 1;; *) echo 0;; esac; }
          thr=$(rank "$lvl")
          total=0
          shopt -s nullglob
          for s in .audit/*${{ matrix.python-version }}*.sarif; do
            hits=$(jq -r '
              [ .runs[].results[]? |
                ( .properties.severity // .level // .rule.properties.security-severity // "" ) ] |
              map( if test("^[0-9.]+$") then
                      (if (tonumber>=9) then "critical"
                       elif (tonumber>=7) then "high"
                       elif (tonumber>=4) then "medium"
                       elif (tonumber>0) then "low" else "none" end)
                   else ascii_downcase end )' "$s" \
            | awk -v thr="$thr" '
              function r(x){ return x=="critical"?4:x=="high"?3:x=="medium"?2:(x=="low"||x=="warning")?1:0 }
              { if (r($0) >= thr) c++ } END { print c+0 }')
            total=$(( total + hits ))
          done
          if (( total > 0 )); then
            echo "::error::pip-audit (py${{ matrix.python-version }}) found $total issue(s) at >= ${lvl} severity"
            exit 1
          else
            echo "No issues at >= ${lvl} severity for py${{ matrix.python-version }}."
          fi

name: pip-audit

on:
  pull_request:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 7 * * 2"  # Tuesdays 07:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write  # needed for SARIF upload

concurrency:
  group: pip-audit-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  # Set to "none" (default) to never fail CI, or "critical|high|medium|low" to gate merges.
  AUDIT_FAIL_ON: "none"
  # Pin pip-audit for reproducibility (update occasionally)
  PIP_AUDIT_VERSION: "2.7.3"

jobs:
  audit:
    name: Python deps vulnerability audit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          python -m pip install "pip-audit==${PIP_AUDIT_VERSION}"

      - name: Discover requirement files
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t REQS < <(git ls-files \
              ':!:**/.venv/**' \
              ':!:**/site-packages/**' \
              '**/requirements*.txt' \
              'requirements.txt' \
              'requirements-dev.txt' \
              'requirements-kaggle.txt' 2>/dev/null | sort -u || true)
          if [ "${#REQS[@]}" -gt 0 ]; then
            printf 'reqs=%s\n' "$(printf '%s ' "${REQS[@]}")" >> "$GITHUB_OUTPUT"
          else
            echo "No requirements*.txt files found."
          fi

      - name: Audit requirement files â†’ SARIF
        if: steps.discover.outputs.reqs != ''
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .audit
          IFS=' ' read -r -a REQS <<< "${{ steps.discover.outputs.reqs }}"
          for f in "${REQS[@]}"; do
            out=".audit/$(echo "$f" | tr '/.' '__').sarif"
            echo "::group::pip-audit -r $f"
            # --progress-spinner off for clean logs; --format sarif for code scanning
            pip-audit -r "$f" --format sarif --output "$out" || true
            echo "::endgroup::"
          done

      - name: Project-mode audit (pyproject/setup)
        shell: bash
        run: |
          set -euo pipefail
          if [ -f pyproject.toml ] || [ -f setup.cfg ] || [ -f setup.py ]; then
            echo "::group::pip-audit (project)"
            pip-audit --format sarif --output .audit/project.sarif || true
            echo "::endgroup::"
          fi

      - name: Upload SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .audit
          category: pip-audit

      - name: Upload raw reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-reports
          path: .audit/*.sarif
          if-no-files-found: ignore
          retention-days: 7

      - name: Optional failure gate by severity
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          lvl="${AUDIT_FAIL_ON,,}"
          [[ "$lvl" == "none" || -z "$lvl" ]] && { echo "Gate disabled (AUDIT_FAIL_ON=$lvl)."; exit 0; }
          # Count findings at or above threshold (naive SARIF grep; good enough for gating)
          # Order: critical > high > medium > low
          declare -A rank=( [low]=1 [medium]=2 [high]=3 [critical]=4 )
          thr=${rank[$lvl]:-0}
          total=0
          for s in .audit/*.sarif; do
            [ -f "$s" ] || continue
            # Extract severity from SARIF. pip-audit uses level values like "error"/"warning" with properties.severity.
            hits=$(jq -r '.runs[].results[]? | (.properties.severity // .level // "")' "$s" 2>/dev/null \
              | awk -v thr="$thr" '
                  function norm(x){tolower(x); if(x=="critical")return 4; if(x=="high")return 3; if(x=="medium")return 2; if(x=="warning"||x=="low")return 1; if(x=="error")return 3; return 0}
                  { if (norm($0) >= thr) c++ } END { print c+0 }')
            total=$(( total + hits ))
          done
          if (( total > 0 )); then
            echo "::error::pip-audit found $total issues at >= ${lvl} severity"
            exit 1
          else
            echo "No issues at >= ${lvl} severity."
          fi